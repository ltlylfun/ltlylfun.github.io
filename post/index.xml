<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Posts on ltlylfunBlog</title><link>https://blog.ltlyl.fun/post/</link><description>Recent content in Posts on ltlylfunBlog</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><lastBuildDate>Sat, 22 Feb 2025 14:20:09 +0800</lastBuildDate><atom:link href="https://blog.ltlyl.fun/post/index.xml" rel="self" type="application/rss+xml"/><item><title>关于React的笔记</title><link>https://blog.ltlyl.fun/p/%E5%85%B3%E4%BA%8Ereact%E7%9A%84%E7%AC%94%E8%AE%B0/</link><pubDate>Sat, 22 Feb 2025 14:20:09 +0800</pubDate><guid>https://blog.ltlyl.fun/p/%E5%85%B3%E4%BA%8Ereact%E7%9A%84%E7%AC%94%E8%AE%B0/</guid><description>&lt;h2 id="前言">前言
&lt;/h2>&lt;p>本笔记不是零基础笔记&lt;/p>
&lt;h2 id="react-组件名称">React 组件名称
&lt;/h2>&lt;p>React 组件是常规的 JavaScript 函数，但 组件的名称必须以&lt;strong>大写字母开头&lt;/strong>，否则它们将无法运行！&lt;/p>
&lt;h2 id="jsx-的规则">jsx 的规则
&lt;/h2>&lt;h3 id="jsx-的-return">jsx 的 return
&lt;/h3>&lt;p>这个组件返回一个带有 src 和 alt 属性的 &lt;img /> 标签。&lt;img /> 写得像 HTML，但实际上是 JavaScript！这种语法被称为 JSX，它允许你在 JavaScript 中嵌入标签。&lt;/p>
&lt;p>返回语句可以全写在一行上，如下面组件中所示：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-jsx" data-lang="jsx">&lt;span class="line">&lt;span class="ln">1&lt;/span>&lt;span class="cl">&lt;span class="k">return&lt;/span> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">img&lt;/span> &lt;span class="na">src&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;https://i.imgur.com/MK3eW3As.jpg&amp;#34;&lt;/span> &lt;span class="na">alt&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;Katherine Johnson&amp;#34;&lt;/span> &lt;span class="p">/&amp;gt;;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>但是，如果你的标签和 return 关键字不在同一行，则必须把它包裹在一对括号中，如下所示：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-jsx" data-lang="jsx">&lt;span class="line">&lt;span class="ln">1&lt;/span>&lt;span class="cl">&lt;span class="k">return&lt;/span> &lt;span class="p">(&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">2&lt;/span>&lt;span class="cl"> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">div&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">3&lt;/span>&lt;span class="cl"> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">img&lt;/span> &lt;span class="na">src&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;https://i.imgur.com/MK3eW3As.jpg&amp;#34;&lt;/span> &lt;span class="na">alt&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;Katherine Johnson&amp;#34;&lt;/span> &lt;span class="p">/&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">4&lt;/span>&lt;span class="cl"> &lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">div&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">5&lt;/span>&lt;span class="cl">&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;strong>没有括号包裹的话，任何在 return 下一行的代码都 将被忽略！&lt;/strong>&lt;/p>
&lt;p>JSX 虽然看起来很像 HTML，但在底层其实被转化为了 JavaScript 对象，你&lt;strong>不能在一个函数中返回多个对象，除非用一个数组把他们包装起来&lt;/strong>。这就是为什么多个 JSX 标签必须要用一个父元素或者 Fragment 来包裹。&lt;/p>
&lt;h3 id="标签必须闭合">标签必须闭合
&lt;/h3>&lt;p>JSX 要求标签必须正确闭合。像 &lt;code>&amp;lt;img&amp;gt;&lt;/code> 这样的自闭合标签必须书写成 &lt;code>&amp;lt;img /&amp;gt;&lt;/code>，而像 &lt;code>&amp;lt;li&amp;gt;oranges&lt;/code> 这样只有开始标签的元素必须带有闭合标签，需要改为 &lt;code>&amp;lt;li&amp;gt;oranges&amp;lt;/li&amp;gt;&lt;/code>。&lt;/p>
&lt;h3 id="使用驼峰式命名法给-所有-大部分属性命名">使用驼峰式命名法给 所有 大部分属性命名！
&lt;/h3>&lt;p>JSX 最终会被转化为 JavaScript，而 JSX 中的属性也会变成 JavaScript 对象中的键值对。在你自己的组件中，经常会遇到需要用变量的方式读取这些属性的时候。但 JavaScript 对变量的命名有限制。例如，变量名称不能包含 - 符号或者像 class 这样的保留字。&lt;/p>
&lt;p>这就是为什么在 React 中，大部分 HTML 和 SVG 属性都用驼峰式命名法表示。例如，需要用 strokeWidth 代替 stroke-width。由于 class 是一个保留字，所以在 React 中需要用 className 来代替。这也是 DOM 属性中的命名。&lt;/p>
&lt;h2 id="默认导出与具名导出">默认导出与具名导出
&lt;/h2>&lt;table>
&lt;thead>
&lt;tr>
&lt;th>语法&lt;/th>
&lt;th>导出语句&lt;/th>
&lt;th>导入语句&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>默认&lt;/td>
&lt;td>&lt;code>export default function Button() {}&lt;/code>&lt;/td>
&lt;td>&lt;code>import Button from './Button.js';&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>具名&lt;/td>
&lt;td>&lt;code>export function Button() {}&lt;/code>&lt;/td>
&lt;td>&lt;code>import { Button } from './Button.js';&lt;/code>&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>一个文件里有且仅有一个 默认 导出，但是可以有任意多个 具名 导出。&lt;/p>
&lt;p>当使用默认导入时，你可以在 import 语句后面进行任意命名。比如 import Banana from &amp;lsquo;./Button.js&amp;rsquo;，如此你能获得与默认导出一致的内容。相反，对于具名导入，导入和导出的名字必须一致。这也是称其为 具名 导入的原因！&lt;/p>
&lt;p>通常，文件中仅包含一个组件时，人们会选择默认导出，而当文件中包含多个组件或某个值需要导出时，则会选择具名导出。 无论选择哪种方式，请记得给你的组件和相应的文件命名一个有意义的名字。不建议创建未命名的组件，比如 export default () =&amp;gt; {}，因为这样会使得调试变得异常困难。&lt;/p>
&lt;h2 id="在大括号---中使用-javascript">在大括号 { } 中使用 JavaScript
&lt;/h2>&lt;h3 id="在-jsx-中只能在以下两种场景中使用大括号">在 JSX 中，只能在以下两种场景中使用大括号
&lt;/h3>&lt;p>用作 JSX 标签内的文本：&lt;code>&amp;lt;h1&amp;gt;{name}'s To Do List&amp;lt;/h1&amp;gt;&lt;/code>是有效的，但是 &lt;code>&amp;lt;{tag}&amp;gt;Gregorio Y. Zara's To Do List&amp;lt;/{tag}&amp;gt;&lt;/code> 无效。
用作紧跟在 = 符号后的 属性：&lt;code>src={avatar}&lt;/code> 会读取 &lt;code>avatar&lt;/code> 变量，但是 &lt;code>src=&amp;quot;{avatar}&amp;quot;&lt;/code> 只会传一个字符串 &lt;code>{avatar}&lt;/code>。&lt;/p>
&lt;h3 id="使用-双大括号jsx-中的-css-和-对象">使用 “双大括号”：JSX 中的 CSS 和 对象
&lt;/h3>&lt;p>除了字符串、数字和其它 JavaScript 表达式，你甚至可以在 JSX 中传递对象。对象也用大括号表示，例如 &lt;code>{ name: &amp;quot;Hedy Lamarr&amp;quot;, inventions: 5 }&lt;/code>。因此，为了能在 JSX 中传递，你必须用另一对额外的大括号包裹对象：&lt;code>person={{ name: &amp;quot;Hedy Lamarr&amp;quot;, inventions: 5 }}&lt;/code>。&lt;/p>
&lt;p>你可能在 JSX 的内联 CSS 样式中就已经见过这种写法了。React 不要求你使用内联样式（使用 CSS 类就能满足大部分情况）。但是当你需要内联样式的时候，你可以给 style 属性传递一个对象：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-gdscript3" data-lang="gdscript3">&lt;span class="line">&lt;span class="ln"> 1&lt;/span>&lt;span class="cl">&lt;span class="k">export&lt;/span> &lt;span class="n">default&lt;/span> &lt;span class="n">function&lt;/span> &lt;span class="n">TodoList&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 2&lt;/span>&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="p">(&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 3&lt;/span>&lt;span class="cl"> &lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">ul&lt;/span> &lt;span class="n">style&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="p">{{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 4&lt;/span>&lt;span class="cl"> &lt;span class="n">backgroundColor&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s1">&amp;#39;black&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 5&lt;/span>&lt;span class="cl"> &lt;span class="n">color&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s1">&amp;#39;pink&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 6&lt;/span>&lt;span class="cl"> &lt;span class="p">}}&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 7&lt;/span>&lt;span class="cl"> &lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">li&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="n">Improve&lt;/span> &lt;span class="n">the&lt;/span> &lt;span class="n">videophone&lt;/span>&lt;span class="o">&amp;lt;/&lt;/span>&lt;span class="n">li&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 8&lt;/span>&lt;span class="cl"> &lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">li&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="n">Prepare&lt;/span> &lt;span class="n">aeronautics&lt;/span> &lt;span class="n">lectures&lt;/span>&lt;span class="o">&amp;lt;/&lt;/span>&lt;span class="n">li&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 9&lt;/span>&lt;span class="cl"> &lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">li&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="n">Work&lt;/span> &lt;span class="n">on&lt;/span> &lt;span class="n">the&lt;/span> &lt;span class="n">alcohol&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">fuelled&lt;/span> &lt;span class="n">engine&lt;/span>&lt;span class="o">&amp;lt;/&lt;/span>&lt;span class="n">li&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">10&lt;/span>&lt;span class="cl"> &lt;span class="o">&amp;lt;/&lt;/span>&lt;span class="n">ul&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">11&lt;/span>&lt;span class="cl"> &lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">12&lt;/span>&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>注意，内联 style 属性 使用驼峰命名法编写。例如，HTML &lt;code>&amp;lt;ul style=&amp;quot;background-color: black&amp;quot;&amp;gt;&lt;/code> 在你的组件里应该写成 &lt;code>&amp;lt;ul style={{ backgroundColor: 'black' }}&amp;gt;&lt;/code>。&lt;/p>
&lt;p>所以当你下次在 JSX 中看到 &lt;code>{{ }}&lt;/code>时，就知道它只不过是包在大括号里的一个对象罢了！&lt;/p>
&lt;h2 id="props">props
&lt;/h2>&lt;ul>
&lt;li>要传递 props，请将它们添加到 JSX，就像使用 HTML 属性一样。&lt;/li>
&lt;li>要读取 props，请使用 &lt;code>function Avatar({ person, size })&lt;/code> 解构语法。&lt;/li>
&lt;li>你可以指定一个默认值，如 size = 100，用于缺少值或值为 undefined 的 props 。&lt;/li>
&lt;li>你可以使用 &lt;code>&amp;lt;Avatar {...props} /&amp;gt; &lt;/code>JSX 展开语法转发所有 props，但不要过度使用它！&lt;/li>
&lt;li>像 &lt;code>&amp;lt;Card&amp;gt;&amp;lt;Avatar /&amp;gt;&amp;lt;/Card&amp;gt;&lt;/code> 这样的嵌套 JSX，将被视为 Card 组件的 children prop。&lt;/li>
&lt;li>Props 是只读的时间快照：每次渲染都会收到新版本的 props。&lt;/li>
&lt;li>你不能改变 props。当你需要交互性时，你可以设置 state。&lt;/li>
&lt;/ul>
&lt;h2 id="条件渲染">条件渲染
&lt;/h2>&lt;ul>
&lt;li>在 React，你可以使用 JavaScript 来控制分支逻辑。&lt;/li>
&lt;li>你可以使用 if 语句来选择性地返回 JSX 表达式。&lt;/li>
&lt;li>你可以选择性地将一些 JSX 赋值给变量，然后用大括号将其嵌入到其他 JSX 中。&lt;/li>
&lt;li>在 JSX 中，&lt;code>{cond ? &amp;lt;A /&amp;gt; : &amp;lt;B /&amp;gt;}&lt;/code> 表示 “当 cond 为真值时, 渲染 &lt;code>&amp;lt;A /&amp;gt;&lt;/code>，否则 &lt;code>&amp;lt;B /&amp;gt;&lt;/code>”。&lt;/li>
&lt;li>在 JSX 中，&lt;code>{cond &amp;amp;&amp;amp; &amp;lt;A /&amp;gt;}&lt;/code> 表示 “当 cond 为真值时, 渲染 &lt;A />，否则不进行渲染”。&lt;/li>
&lt;li>快捷的表达式很常见，但如果你更倾向于使用 if，你也可以不使用它们。&lt;/li>
&lt;/ul>
&lt;h2 id="key">key
&lt;/h2>&lt;h3 id="如何设定-key-值">如何设定 key 值
&lt;/h3>&lt;p>不同来源的数据往往对应不同的 key 值获取方式：&lt;/p>
&lt;p>来自数据库的数据： 如果你的数据是从数据库中获取的，那你可以直接使用数据表中的主键，因为它们天然具有唯一性。
本地产生数据： 如果你数据的产生和保存都在本地（例如笔记软件里的笔记），那么你可以使用一个自增计数器或者一个类似 uuid 的库来生成 key。&lt;/p>
&lt;h3 id="key-需要满足的条件">key 需要满足的条件
&lt;/h3>&lt;p>key 值在兄弟节点之间必须是唯一的。 不过不要求全局唯一，在不同的数组中可以使用相同的 key。&lt;/p>
&lt;p>key 值不能改变，否则就失去了使用 key 的意义！所以千万不要在渲染时动态地生成 key。&lt;/p>
&lt;h3 id="react-中为什么需要-key">React 中为什么需要 key？
&lt;/h3>&lt;p>设想一下，假如你桌面上的文件都没有文件名，取而代之的是，你需要通过文件的位置顺序来区分它们———第一个文件，第二个文件，以此类推。也许你也不是不能接受这种方式，可是一旦你删除了其中的一个文件，这种组织方式就会变得混乱无比。原来的第二个文件可能会变成第一个文件，第三个文件会成为第二个文件……&lt;/p>
&lt;p>React 里需要 key 和文件夹里的文件需要有文件名的道理是类似的。它们（key 和文件名）都让我们可以从众多的兄弟元素中唯一标识出某一项（JSX 节点或文件）。而一个精心选择的 key 值所能提供的信息远远不止于这个元素在数组中的位置。即使元素的位置在渲染的过程中发生了改变，它提供的 key 值也能让 React 在整个生命周期中一直认得它。&lt;/p>
&lt;h2 id="保持组件纯粹">保持组件纯粹
&lt;/h2>&lt;ul>
&lt;li>
&lt;p>一个组件必须是纯粹的，就意味着：&lt;/p>
&lt;ul>
&lt;li>只负责自己的任务。 它不会更改在该函数调用前就已存在的对象或变量。&lt;/li>
&lt;li>输入相同，则输出相同。 给定相同的输入，组件应该总是返回相同的 JSX。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>渲染随时可能发生，因此组件不应依赖于彼此的渲染顺序。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>你不应该改变任何用于组件渲染的输入。这包括 props、state 和 context。通过 “设置” state 来更新界面，而不要改变预先存在的对象。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>努力在你返回的 JSX 中表达你的组件逻辑。当你需要“改变事物”时，你通常希望在事件处理程序中进行。作为最后的手段，你可以使用 useEffect。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="传递给事件的函数">传递给事件的函数
&lt;/h2>&lt;table>
&lt;thead>
&lt;tr>
&lt;th>传递一个函数（正确）&lt;/th>
&lt;th>调用一个函数（错误）&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;code>&amp;lt;button onClick={handleClick}&amp;gt;&lt;/code>&lt;/td>
&lt;td>&lt;code>&amp;lt;button onClick={handleClick()}&amp;gt;&lt;/code>&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>区别很微妙。在第一个示例中，handleClick 函数作为 onClick 事件处理函数传递。这会让 React 记住它，并且只在用户点击按钮时调用你的函数。&lt;/p>
&lt;p>在第二个示例中，handleClick() 中最后的 () 会在 渲染 过程中 立即 触发函数，即使没有任何点击。这是因为位于 JSX {} 之间的 JavaScript 会立即执行。&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>传递一个函数（正确）&lt;/th>
&lt;th>调用一个函数（错误）&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;code>&amp;lt;button onClick={() =&amp;gt; alert('...')}&amp;gt;&lt;/code>&lt;/td>
&lt;td>&lt;code>&amp;lt;button onClick={alert('...')}&amp;gt;&lt;/code>&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>如果按如下方式传递内联代码，并不会在点击时触发，而是会在每次组件渲染时触发：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="ln">1&lt;/span>&lt;span class="cl">// 这个 alert 在组件渲染时触发，而不是点击时触发！
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">2&lt;/span>&lt;span class="cl">&amp;lt;button onClick={alert(&amp;#39;你点击了我！&amp;#39;)}&amp;gt;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>如果你想要定义内联事件处理函数，请将其包装在匿名函数中，如下所示：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="ln">1&lt;/span>&lt;span class="cl">&amp;lt;button onClick={() =&amp;gt; alert(&amp;#39;你点击了我！&amp;#39;)}&amp;gt;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>这里创建了一个稍后调用的函数，而不会在每次渲染时执行其内部代码。&lt;/p>
&lt;p>在这两种情况下，你都应该传递一个函数：&lt;/p>
&lt;ul>
&lt;li>&lt;code>&amp;lt;button onClick={handleClick}&amp;gt;&lt;/code> 传递了 handleClick 函数。&lt;/li>
&lt;li>&lt;code>&amp;lt;button onClick={() =&amp;gt; alert('...')}&amp;gt;&lt;/code> 传递了 () =&amp;gt; alert(&amp;rsquo;&amp;hellip;&amp;rsquo;) 函数。&lt;/li>
&lt;/ul>
&lt;h2 id="事件的传播">事件的传播
&lt;/h2>&lt;p>在 React 中所有事件都会传播，除了 onScroll，它仅适用于你附加到的 JSX 标签。&lt;/p>
&lt;h2 id="阻止传播">阻止传播
&lt;/h2>&lt;p>事件处理函数接收一个 事件对象 作为唯一的参数。按照惯例，它通常被称为 e ，代表 “event”（事件）。你可以使用此对象来读取有关事件的信息。&lt;/p>
&lt;p>这个事件对象还允许你阻止传播。如果你想阻止一个事件到达父组件，你需可以调用 e.stopPropagation() ：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-gdscript3" data-lang="gdscript3">&lt;span class="line">&lt;span class="ln"> 1&lt;/span>&lt;span class="cl">&lt;span class="n">function&lt;/span> &lt;span class="ne">Button&lt;/span>&lt;span class="p">({&lt;/span> &lt;span class="n">onClick&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">children&lt;/span> &lt;span class="p">})&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 2&lt;/span>&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="p">(&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 3&lt;/span>&lt;span class="cl"> &lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">button&lt;/span> &lt;span class="n">onClick&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="n">e&lt;/span> &lt;span class="o">=&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 4&lt;/span>&lt;span class="cl"> &lt;span class="n">e&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">stopPropagation&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 5&lt;/span>&lt;span class="cl"> &lt;span class="n">onClick&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 6&lt;/span>&lt;span class="cl"> &lt;span class="p">}}&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 7&lt;/span>&lt;span class="cl"> &lt;span class="p">{&lt;/span>&lt;span class="n">children&lt;/span>&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 8&lt;/span>&lt;span class="cl"> &lt;span class="o">&amp;lt;/&lt;/span>&lt;span class="n">button&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 9&lt;/span>&lt;span class="cl"> &lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">10&lt;/span>&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">11&lt;/span>&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">12&lt;/span>&lt;span class="cl">&lt;span class="k">export&lt;/span> &lt;span class="n">default&lt;/span> &lt;span class="n">function&lt;/span> &lt;span class="n">Toolbar&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">13&lt;/span>&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="p">(&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">14&lt;/span>&lt;span class="cl"> &lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">div&lt;/span> &lt;span class="n">className&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;Toolbar&amp;#34;&lt;/span> &lt;span class="n">onClick&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="p">{()&lt;/span> &lt;span class="o">=&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">15&lt;/span>&lt;span class="cl"> &lt;span class="n">alert&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;你点击了 toolbar ！&amp;#39;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">16&lt;/span>&lt;span class="cl"> &lt;span class="p">}}&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">17&lt;/span>&lt;span class="cl"> &lt;span class="o">&amp;lt;&lt;/span>&lt;span class="ne">Button&lt;/span> &lt;span class="n">onClick&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="p">{()&lt;/span> &lt;span class="o">=&amp;gt;&lt;/span> &lt;span class="n">alert&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;正在播放！&amp;#39;&lt;/span>&lt;span class="p">)}&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">18&lt;/span>&lt;span class="cl"> &lt;span class="err">播放电影&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">19&lt;/span>&lt;span class="cl"> &lt;span class="o">&amp;lt;/&lt;/span>&lt;span class="ne">Button&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">20&lt;/span>&lt;span class="cl"> &lt;span class="o">&amp;lt;&lt;/span>&lt;span class="ne">Button&lt;/span> &lt;span class="n">onClick&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="p">{()&lt;/span> &lt;span class="o">=&amp;gt;&lt;/span> &lt;span class="n">alert&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;正在上传！&amp;#39;&lt;/span>&lt;span class="p">)}&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">21&lt;/span>&lt;span class="cl"> &lt;span class="err">上传图片&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">22&lt;/span>&lt;span class="cl"> &lt;span class="o">&amp;lt;/&lt;/span>&lt;span class="ne">Button&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">23&lt;/span>&lt;span class="cl"> &lt;span class="o">&amp;lt;/&lt;/span>&lt;span class="n">div&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">24&lt;/span>&lt;span class="cl"> &lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">25&lt;/span>&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="阻止默认行为">阻止默认行为
&lt;/h2>&lt;p>某些浏览器事件具有与事件相关联的默认行为。例如，点击 &lt;form> 表单内部的按钮会触发表单提交事件，默认情况下将重新加载整个页面&lt;/p>
&lt;p>你可以调用事件对象中的 e.preventDefault() 来阻止这种情况发生&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-gdscript3" data-lang="gdscript3">&lt;span class="line">&lt;span class="ln"> 1&lt;/span>&lt;span class="cl">&lt;span class="k">export&lt;/span> &lt;span class="n">default&lt;/span> &lt;span class="n">function&lt;/span> &lt;span class="n">Signup&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 2&lt;/span>&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="p">(&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 3&lt;/span>&lt;span class="cl"> &lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">form&lt;/span> &lt;span class="n">onSubmit&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="n">e&lt;/span> &lt;span class="o">=&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 4&lt;/span>&lt;span class="cl"> &lt;span class="n">e&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">preventDefault&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 5&lt;/span>&lt;span class="cl"> &lt;span class="n">alert&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;提交表单！&amp;#39;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 6&lt;/span>&lt;span class="cl"> &lt;span class="p">}}&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 7&lt;/span>&lt;span class="cl"> &lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">input&lt;/span> &lt;span class="o">/&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 8&lt;/span>&lt;span class="cl"> &lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">button&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="err">发送&lt;/span>&lt;span class="o">&amp;lt;/&lt;/span>&lt;span class="n">button&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 9&lt;/span>&lt;span class="cl"> &lt;span class="o">&amp;lt;/&lt;/span>&lt;span class="n">form&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">10&lt;/span>&lt;span class="cl"> &lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">11&lt;/span>&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="usestate">useState
&lt;/h2>&lt;h3 id="设置-state-不会更改现有渲染中的变量但会请求一次新的渲染">设置 state 不会更改现有渲染中的变量，但会请求一次新的渲染。
&lt;/h3>&lt;p>设置 state 的调用是在告诉 React：&amp;ldquo;组件状态已更新，请安排一个新的渲染周期来反映这一变化。&amp;rdquo;&lt;/p>
&lt;ol>
&lt;li>
&lt;p>当你调用 setState 时，React 并不会立即修改当前渲染（即已经生成的虚拟 DOM）中的变量。这意味着，在当前的渲染过程中，你依然看到的是旧的状态值。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>setState 调用其实是异步的。它会在内部标记组件需要更新，但真正的更新和重新渲染会在稍后的时机发生（通常是在事件处理结束或其他合适的时机）。更新后的状态会在下一次渲染时生效。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>当新的渲染触发后，React 会创建一个全新的虚拟 DOM，并使用更新后的 state 生成新的 UI，然后再比较前后两次虚拟 DOM 的变化，并只更新浏览器中实际变动的部分（即“调和”过程）。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>总结来说，设置 state 不会修改当前渲染的变量，它只是请求一次新的渲染，在下一个渲染周期中使用新的 state 来重新计算和更新 UI。这种机制有助于保持组件状态的不可变性和渲染的一致性。&lt;/p>
&lt;h3 id="react-会在事件处理函数执行完成之后处理-state-更新这被称为批处理">React 会在事件处理函数执行完成之后处理 state 更新。这被称为批处理。
&lt;/h3>&lt;p>只有在你的事件处理函数及其中任何代码执行完成 之后，UI 才会更新。这种特性也就是 批处理，它会使你的 React 应用运行得更快。它还会帮你避免处理只 ​​ 更新了一部分 state 变量的令人困惑的“半成品”渲染。&lt;/p>
&lt;p>React 不会跨 多个 需要刻意触发的事件（如点击）进行批处理——每次点击都是单独处理的。请放心，React 只会在一般来说安全的情况下才进行批处理。这可以确保，例如，如果第一次点击按钮会禁用表单，那么第二次点击就不会再次提交它。&lt;/p>
&lt;h3 id="要在一个事件中多次更新某些-state你可以使用-setnumbern--n--1-更新函数">要在一个事件中多次更新某些 state，你可以使用 setNumber(n =&amp;gt; n + 1) 更新函数。
&lt;/h3>&lt;h3 id="将-state-视为只读的">将 state 视为只读的
&lt;/h3>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="ln">1&lt;/span>&lt;span class="cl">onPointerMove={e =&amp;gt; {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">2&lt;/span>&lt;span class="cl"> position.x = e.clientX;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">3&lt;/span>&lt;span class="cl"> position.y = e.clientY;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">4&lt;/span>&lt;span class="cl">}}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>这段代码直接修改了 上一次渲染中 分配给 position 的对象。但是因为并没有使用 state 的设置函数，React 并不知道对象已更改。所以 React 没有做出任何响应。虽然在一些情况下，直接修改 state 可能是有效的，但并不推荐这么做。你应该把在渲染过程中可以访问到的 state 视为只读的。&lt;/p>
&lt;p>在这种情况下，为了真正地 触发一次重新渲染，你需要创建一个新对象并把它传递给 state 的设置函数：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="ln">1&lt;/span>&lt;span class="cl">onPointerMove={e =&amp;gt; {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">2&lt;/span>&lt;span class="cl"> setPosition({
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">3&lt;/span>&lt;span class="cl"> x: e.clientX,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">4&lt;/span>&lt;span class="cl"> y: e.clientY
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">5&lt;/span>&lt;span class="cl"> });
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">6&lt;/span>&lt;span class="cl">}}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>通过使用 setPosition，你在告诉 React：&lt;/p>
&lt;p>使用这个新的对象替换 position 的值,然后再次渲染这个组件&lt;/p>
&lt;h3 id="局部-mutation-是可以接受的">局部 mutation 是可以接受的
&lt;/h3>&lt;p>像这样的代码是有问题的，因为它改变了 state 中现有的对象：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="ln">1&lt;/span>&lt;span class="cl">position.x = e.clientX;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">2&lt;/span>&lt;span class="cl">position.y = e.clientY;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>但是像这样的代码就 没有任何问题，因为你改变的是你刚刚创建的一个新的对象：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-gdscript3" data-lang="gdscript3">&lt;span class="line">&lt;span class="ln">1&lt;/span>&lt;span class="cl">&lt;span class="k">const&lt;/span> &lt;span class="n">nextPosition&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">{};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">2&lt;/span>&lt;span class="cl">&lt;span class="n">nextPosition&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">x&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">e&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">clientX&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">3&lt;/span>&lt;span class="cl">&lt;span class="n">nextPosition&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">y&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">e&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">clientY&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">4&lt;/span>&lt;span class="cl">&lt;span class="n">setPosition&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">nextPosition&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>事实上，它完全等同于下面这种写法：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="ln">1&lt;/span>&lt;span class="cl">setPosition({
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">2&lt;/span>&lt;span class="cl"> x: e.clientX,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">3&lt;/span>&lt;span class="cl"> y: e.clientY
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">4&lt;/span>&lt;span class="cl">});
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>只有当你改变已经处于 state 中的 现有 对象时，mutation 才会成为问题。而修改一个你刚刚创建的对象就不会出现任何问题，因为 还没有其他的代码引用它。改变它并不会意外地影响到依赖它的东西。这叫做“局部 mutation”。你甚至可以 在渲染的过程中 进行“局部 mutation”的操作。这种操作既便捷又没有任何问题！&lt;/p>
&lt;h3 id="使用展开语法复制对象">使用展开语法复制对象
&lt;/h3>&lt;p>下面这行代码修改了上一次渲染中的 state：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="ln">1&lt;/span>&lt;span class="cl">person.firstName = e.target.value;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>想要实现你的需求，最可靠的办法就是创建一个新的对象并将它传递给 setPerson。但是在这里，你还需要 把当前的数据复制到新对象中，因为你只改变了其中一个字段：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="ln">1&lt;/span>&lt;span class="cl">setPerson({
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">2&lt;/span>&lt;span class="cl"> firstName: e.target.value, // 从 input 中获取新的 first name
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">3&lt;/span>&lt;span class="cl"> lastName: person.lastName,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">4&lt;/span>&lt;span class="cl"> email: person.email
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">5&lt;/span>&lt;span class="cl">});
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>你可以使用&lt;code>...&lt;/code>对象展开 语法，这样你就不需要单独复制每个属性。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="ln">1&lt;/span>&lt;span class="cl">setPerson({
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">2&lt;/span>&lt;span class="cl"> ...person, // 复制上一个 person 中的所有字段
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">3&lt;/span>&lt;span class="cl"> firstName: e.target.value // 但是覆盖 firstName 字段
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">4&lt;/span>&lt;span class="cl">});
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>对于大型表单，将所有数据都存放在同一个对象中是非常方便的——前提是你能够正确地更新它！&lt;/p>
&lt;p>请注意&lt;code>...&lt;/code>展开语法本质是是“浅拷贝”——它只会复制一层。这使得它的执行速度很快，但是也意味着当你想要更新一个嵌套属性时，你必须得多次使用展开语法。&lt;/p>
&lt;h3 id="更新一个嵌套对象">更新一个嵌套对象
&lt;/h3>&lt;p>考虑下面这种结构的嵌套对象：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-gdscript3" data-lang="gdscript3">&lt;span class="line">&lt;span class="ln">1&lt;/span>&lt;span class="cl">&lt;span class="k">const&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="n">person&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">setPerson&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">useState&lt;/span>&lt;span class="p">({&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">2&lt;/span>&lt;span class="cl"> &lt;span class="n">name&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s1">&amp;#39;Niki de Saint Phalle&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">3&lt;/span>&lt;span class="cl"> &lt;span class="n">artwork&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">4&lt;/span>&lt;span class="cl"> &lt;span class="n">title&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s1">&amp;#39;Blue Nana&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">5&lt;/span>&lt;span class="cl"> &lt;span class="n">city&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s1">&amp;#39;Hamburg&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">6&lt;/span>&lt;span class="cl"> &lt;span class="n">image&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s1">&amp;#39;https://i.imgur.com/Sd1AgUOm.jpg&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">7&lt;/span>&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">8&lt;/span>&lt;span class="cl">&lt;span class="p">});&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>如果你想要更新 person.artwork.city 的值，用 mutation 来实现的方法非常容易理解：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="ln">1&lt;/span>&lt;span class="cl">person.artwork.city = &amp;#39;New Delhi&amp;#39;;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>但是在 React 中，你需要将 state 视为不可变的！为了修改 city 的值，你首先需要创建一个新的 artwork 对象（其中预先填充了上一个 artwork 对象中的数据），然后创建一个新的 person 对象，并使得其中的 artwork 属性指向新创建的 artwork 对象：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-gdscript3" data-lang="gdscript3">&lt;span class="line">&lt;span class="ln">1&lt;/span>&lt;span class="cl">&lt;span class="k">const&lt;/span> &lt;span class="n">nextArtwork&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="o">...&lt;/span>&lt;span class="n">person&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">artwork&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">city&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s1">&amp;#39;New Delhi&amp;#39;&lt;/span> &lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">2&lt;/span>&lt;span class="cl">&lt;span class="k">const&lt;/span> &lt;span class="n">nextPerson&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="o">...&lt;/span>&lt;span class="n">person&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">artwork&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">nextArtwork&lt;/span> &lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">3&lt;/span>&lt;span class="cl">&lt;span class="n">setPerson&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">nextPerson&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>或者，写成一个函数调用：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="ln">1&lt;/span>&lt;span class="cl">setPerson({
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">2&lt;/span>&lt;span class="cl"> ...person, // 复制其它字段的数据
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">3&lt;/span>&lt;span class="cl"> artwork: { // 替换 artwork 字段
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">4&lt;/span>&lt;span class="cl"> ...person.artwork, // 复制之前 person.artwork 中的数据
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">5&lt;/span>&lt;span class="cl"> city: &amp;#39;New Delhi&amp;#39; // 但是将 city 的值替换为 New Delhi！
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">6&lt;/span>&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">7&lt;/span>&lt;span class="cl">});
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="使用-immer-编写简洁的更新逻辑">使用 Immer 编写简洁的更新逻辑
&lt;/h3>&lt;p>如果你的 state 有多层的嵌套，你或许应该考虑 将其扁平化。但是，如果你不想改变 state 的数据结构，你可能更喜欢用一种更便捷的方式来实现嵌套展开的效果。Immer 是一个非常流行的库，它可以让你使用简便但可以直接修改的语法编写代码，并会帮你处理好复制的过程。通过使用 Immer，你写出的代码看起来就像是你“打破了规则”而直接修改了对象：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="ln">1&lt;/span>&lt;span class="cl">updatePerson(draft =&amp;gt; {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">2&lt;/span>&lt;span class="cl"> draft.artwork.city = &amp;#39;Lagos&amp;#39;;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">3&lt;/span>&lt;span class="cl">});
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>但是不同于一般的 mutation，它并不会覆盖之前的 state！&lt;/p>
&lt;p>尝试使用 Immer:&lt;/p>
&lt;ul>
&lt;li>运行 &lt;code>npm install use-immer&lt;/code> 添加 Immer 依赖&lt;/li>
&lt;li>用 &lt;code>import { useImmer } from 'use-immer'&lt;/code> 替换掉 &lt;code>import { useState } from 'react'&lt;/code>&lt;/li>
&lt;/ul>
&lt;h3 id="在没有-mutation-的前提下更新数组">在没有 mutation 的前提下更新数组
&lt;/h3>&lt;p>在 JavaScript 中，数组只是另一种对象。同对象一样，你需要将 React state 中的数组视为只读的。这意味着你不应该使用类似于 arr[0] = &amp;lsquo;bird&amp;rsquo; 这样的方式来重新分配数组中的元素，也不应该使用会直接修改原始数组的方法，例如 push() 和 pop()。&lt;/p>
&lt;p>相反，每次要更新一个数组时，你需要把一个新的数组传入 state 的 setting 方法中。为此，你可以通过使用像 filter() 和 map() 这样不会直接修改原始值的方法，从原始数组生成一个新的数组。然后你就可以将 state 设置为这个新生成的数组。&lt;/p>
&lt;p>下面是常见数组操作的参考表。当你操作 React state 中的数组时，你需要避免使用左列的方法，而首选右列的方法：&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>操作&lt;/th>
&lt;th>避免使用 (会改变原始数组)&lt;/th>
&lt;th>推荐使用 (会返回一个新数组）&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>添加元素&lt;/td>
&lt;td>push，unshift&lt;/td>
&lt;td>concat，[&amp;hellip;arr] 展开语法&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>删除元素&lt;/td>
&lt;td>pop，shift，splice&lt;/td>
&lt;td>filter，slice&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>替换元素&lt;/td>
&lt;td>splice，arr[i] = &amp;hellip; 赋值&lt;/td>
&lt;td>map&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>排序&lt;/td>
&lt;td>reverse，sort&lt;/td>
&lt;td>先将数组复制一份&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h2 id="useref">useRef
&lt;/h2>&lt;h3 id="给你的组件添加-ref">给你的组件添加 ref
&lt;/h3>&lt;p>你可以通过从 React 导入 useRef Hook 来为你的组件添加一个 ref：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="ln">1&lt;/span>&lt;span class="cl">import { useRef } from &amp;#39;react&amp;#39;;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>在你的组件内，调用 useRef Hook 并传入你想要引用的初始值作为唯一参数。例如，这里的 ref 引用的值是“0”：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-gdscript3" data-lang="gdscript3">&lt;span class="line">&lt;span class="ln">1&lt;/span>&lt;span class="cl">&lt;span class="k">const&lt;/span> &lt;span class="n">ref&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">useRef&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>useRef 返回一个这样的对象:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="ln">1&lt;/span>&lt;span class="cl">{
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">2&lt;/span>&lt;span class="cl"> current: 0 // 你向 useRef 传入的值
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">3&lt;/span>&lt;span class="cl">}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>与 state 不同的是，ref 是一个普通的 JavaScript 对象，具有可以被读取和修改的 current 属性。&lt;/p>
&lt;p>你可以用 ref.current 属性访问该 ref 的当前值。这个值是有意被设置为可变的，意味着你既可以读取它也可以写入它。就像一个 React 追踪不到的、用来存储组件信息的秘密“口袋”。（这就是让它成为 React 单向数据流的“脱围机制”的原因）&lt;/p>
&lt;h3 id="ref-和-state-的不同之处">ref 和 state 的不同之处
&lt;/h3>&lt;table>
&lt;thead>
&lt;tr>
&lt;th>&lt;/th>
&lt;th>useRef&lt;/th>
&lt;th>useState&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>返回值&lt;/td>
&lt;td>useRef(initialValue) 返回 &lt;code>{ current: initialValue }&lt;/code>&lt;/td>
&lt;td>useState(initialValue) 返回 &lt;code>[value, setValue]&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>触发渲染&lt;/td>
&lt;td>更改时不会触发重新渲染&lt;/td>
&lt;td>更改时触发重新渲染&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>可变性&lt;/td>
&lt;td>可变 —— 你可以在渲染过程之外修改和更新 &lt;code>current&lt;/code> 的值。&lt;/td>
&lt;td>“不可变” —— 你必须使用 state 设置函数来修改 state 变量，从而排队重新渲染。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>读取/写入时机&lt;/td>
&lt;td>你不应在渲染期间读取（或写入） &lt;code>current&lt;/code> 值。&lt;/td>
&lt;td>你可以随时读取 state。但是，每次渲染都有自己不变的 state 快照。&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3 id="使用-ref-操作-dom">使用 ref 操作 DOM
&lt;/h3>&lt;p>要访问由 React 管理的 DOM 节点，首先，引入 useRef Hook：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="ln">1&lt;/span>&lt;span class="cl">import { useRef } from &amp;#39;react&amp;#39;;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>然后，在你的组件中使用它声明一个 ref：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-gdscript3" data-lang="gdscript3">&lt;span class="line">&lt;span class="ln">1&lt;/span>&lt;span class="cl">&lt;span class="k">const&lt;/span> &lt;span class="n">myRef&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">useRef&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">null&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>最后，将 ref 作为 ref 属性值传递给想要获取的 DOM 节点的 JSX 标签：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="ln">1&lt;/span>&lt;span class="cl">&amp;lt;div ref={myRef}&amp;gt;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>useRef Hook 返回一个对象，该对象有一个名为 current 的属性。最初，myRef.current 是 null。当 React 为这个 &lt;div> 创建一个 DOM 节点时，React 会把对该节点的引用放入 myRef.current。然后，你可以从 事件处理器 访问此 DOM 节点，并使用在其上定义的内置浏览器 API。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="ln">1&lt;/span>&lt;span class="cl">// 你可以使用任意浏览器 API，例如：
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">2&lt;/span>&lt;span class="cl">myRef.current.scrollIntoView();
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="useeffect">useEffect
&lt;/h2>&lt;h3 id="如何编写-effect">如何编写 Effect
&lt;/h3>&lt;p>要编写一个 Effect, 请遵循以下三个步骤：&lt;/p>
&lt;ol>
&lt;li>&lt;strong>&lt;em>声明 Effect&lt;/em>&lt;/strong>。通常 Effect 会在每次 提交 后运行。&lt;/li>
&lt;li>&lt;strong>指定 Effect 依赖&lt;/strong>。大多数 Effect 应该按需运行，而不是在每次渲染后都运行。例如，淡入动画应该只在组件出现时触发。连接和断开服务器的操作只应在组件出现和消失时，或者切换聊天室时执行。你将通过指定 依赖项 来学习如何控制这一点。&lt;/li>
&lt;li>&lt;strong>必要时添加清理操作&lt;/strong>。一些 Effect 需要指定如何停止、撤销，或者清除它们所执行的操作。例如，“连接”需要“断开”，“订阅”需要“退订”，而“获取数据”需要“取消”或者“忽略”。你将学习如何通过返回一个 清理函数 来实现这些。&lt;/li>
&lt;/ol>
&lt;h3 id="注意事项">注意事项
&lt;/h3>&lt;ul>
&lt;li>
&lt;p>每当你的组件渲染时，React 会先更新页面，然后再运行 useEffect 中的代码。换句话说，useEffect &lt;strong>会“延迟”一段代码的运行，直到渲染结果反映在页面上&lt;/strong>。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>默认情况下，Effect 会在 每次 渲染后运行。正因如此，以下代码会陷入死循环：&lt;/p>
&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-gdscript3" data-lang="gdscript3">&lt;span class="line">&lt;span class="ln">1&lt;/span>&lt;span class="cl">&lt;span class="k">const&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="n">count&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">setCount&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">useState&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">2&lt;/span>&lt;span class="cl">&lt;span class="n">useEffect&lt;/span>&lt;span class="p">(()&lt;/span> &lt;span class="o">=&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">3&lt;/span>&lt;span class="cl"> &lt;span class="n">setCount&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">count&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">4&lt;/span>&lt;span class="cl">&lt;span class="p">});&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>没有依赖数组和使用空数组 [] 作为依赖数组，行为是不同的：&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="ln"> 1&lt;/span>&lt;span class="cl">useEffect(() =&amp;gt; {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 2&lt;/span>&lt;span class="cl"> // 这里的代码会在每次渲染后运行
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 3&lt;/span>&lt;span class="cl">});
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 4&lt;/span>&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 5&lt;/span>&lt;span class="cl">useEffect(() =&amp;gt; {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 6&lt;/span>&lt;span class="cl"> // 这里的代码只会在组件挂载（首次出现）时运行
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 7&lt;/span>&lt;span class="cl">}, []);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 8&lt;/span>&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 9&lt;/span>&lt;span class="cl">useEffect(() =&amp;gt; {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">10&lt;/span>&lt;span class="cl"> // 这里的代码不但会在组件挂载时运行，而且当 a 或 b 的值自上次渲染后发生变化后也会运行
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">11&lt;/span>&lt;span class="cl">}, [a, b]);
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>
&lt;p>为什么依赖数组中可以省略 ref?&lt;/p>
&lt;p>这是因为 ref 具有 稳定 的标识：React 确保你在 每轮渲染中调用同一个 useRef 时，总能获得相同的对象。ref 不会改变，所以它不会导致重新运行 Effect。因此，在依赖数组中它可有可无。&lt;/p>
&lt;p>useState 返回的 set 函数 也具有稳定的标识，因此它们通常也会被省略。如果在省略某个依赖项时 linter 不会报错，那么这么做就是安全的。&lt;/p>
&lt;p>省略始终稳定的依赖项仅在 linter 能“看到”对象是稳定的时候才有效。例如，如果 ref 是从父组件传递过来的，则必须在依赖数组中指定它。这很有必要，因为你无法确定父组件是一直传递相同的 ref，还是根据条件传递不同的 ref。所以，你的 Effect 会依赖于被传递的是哪个 ref。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>React 会在每次 Effect 重新运行之前调用清理函数，并在组件卸载（被移除）时最后一次调用清理函数。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="usememo性能优化的手段">useMemo(性能优化的手段)
&lt;/h2>&lt;h3 id="用法">用法
&lt;/h3>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-gdscript3" data-lang="gdscript3">&lt;span class="line">&lt;span class="ln">1&lt;/span>&lt;span class="cl">&lt;span class="n">import&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="n">useMemo&lt;/span> &lt;span class="p">}&lt;/span> &lt;span class="n">from&lt;/span> &lt;span class="s1">&amp;#39;react&amp;#39;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">2&lt;/span>&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">3&lt;/span>&lt;span class="cl">&lt;span class="n">function&lt;/span> &lt;span class="n">TodoList&lt;/span>&lt;span class="p">({&lt;/span> &lt;span class="n">todos&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">tab&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">theme&lt;/span> &lt;span class="p">})&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">4&lt;/span>&lt;span class="cl"> &lt;span class="k">const&lt;/span> &lt;span class="n">visibleTodos&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">useMemo&lt;/span>&lt;span class="p">(()&lt;/span> &lt;span class="o">=&amp;gt;&lt;/span> &lt;span class="n">filterTodos&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">todos&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">tab&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="n">todos&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">tab&lt;/span>&lt;span class="p">]);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">5&lt;/span>&lt;span class="cl"> &lt;span class="o">//&lt;/span> &lt;span class="o">...&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">6&lt;/span>&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>你需要给 useMemo 传递两样东西：&lt;/p>
&lt;ul>
&lt;li>一个没有任何参数的 calculation 函数，像这样 () =&amp;gt;，并且返回任何你想要的计算结果。&lt;/li>
&lt;li>一个由包含在你的组件中并在 calculation 中使用的所有值组成的 依赖列表。&lt;/li>
&lt;/ul>
&lt;p>在初次渲染时，你从 useMemo 得到的 值 将会是你的 calculation 函数执行的结果。&lt;/p>
&lt;p>在随后的每一次渲染中，React 将会比较前后两次渲染中的 所有依赖项 是否相同。如果通过 Object.is 比较所有依赖项都没有发生变化，那么 useMemo 将会返回之前已经计算过的那个值。否则，React 将会重新执行 calculation 函数并且返回一个新的值。&lt;/p>
&lt;p>换言之，useMemo 在多次重新渲染中缓存了 calculation 函数计算的结果直到依赖项的值发生变化。&lt;/p>
&lt;h2 id="usecallback">useCallback
&lt;/h2>&lt;h3 id="用法-1">用法
&lt;/h3>&lt;p>当你优化渲染性能的时候，有时需要缓存传递给子组件的函数。让我们先关注一下如何实现，稍后去理解在哪些场景中它是有用的。&lt;/p>
&lt;p>为了缓存组件中多次渲染的函数，你需要将其定义在 useCallback Hook 中：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-gdscript3" data-lang="gdscript3">&lt;span class="line">&lt;span class="ln"> 1&lt;/span>&lt;span class="cl">&lt;span class="n">import&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="n">useCallback&lt;/span> &lt;span class="p">}&lt;/span> &lt;span class="n">from&lt;/span> &lt;span class="s1">&amp;#39;react&amp;#39;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 2&lt;/span>&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 3&lt;/span>&lt;span class="cl">&lt;span class="n">function&lt;/span> &lt;span class="n">ProductPage&lt;/span>&lt;span class="p">({&lt;/span> &lt;span class="n">productId&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">referrer&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">theme&lt;/span> &lt;span class="p">})&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 4&lt;/span>&lt;span class="cl"> &lt;span class="k">const&lt;/span> &lt;span class="n">handleSubmit&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">useCallback&lt;/span>&lt;span class="p">((&lt;/span>&lt;span class="n">orderDetails&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">=&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 5&lt;/span>&lt;span class="cl"> &lt;span class="n">post&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;/product/&amp;#39;&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">productId&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="s1">&amp;#39;/buy&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 6&lt;/span>&lt;span class="cl"> &lt;span class="n">referrer&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 7&lt;/span>&lt;span class="cl"> &lt;span class="n">orderDetails&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 8&lt;/span>&lt;span class="cl"> &lt;span class="p">});&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 9&lt;/span>&lt;span class="cl"> &lt;span class="p">},&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="n">productId&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">referrer&lt;/span>&lt;span class="p">]);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">10&lt;/span>&lt;span class="cl"> &lt;span class="o">//&lt;/span> &lt;span class="o">...&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>你需要传递两个参数给 useCallback：&lt;/p>
&lt;p>在多次渲染中需要缓存的函数&lt;/p>
&lt;ul>
&lt;li>函数内部需要使用到的所有组件内部值的 依赖列表。&lt;/li>
&lt;li>初次渲染时，在 useCallback 处接收的 返回函数 将会是已经传入的函数。&lt;/li>
&lt;/ul>
&lt;p>在之后的渲染中，React 将会使用 Object.is 把 当前的依赖 和已传入之前的依赖进行比较。如果没有任何依赖改变，useCallback 将会返回与之前一样的函数。否则 useCallback 将返回 此次 渲染中传递的函数。&lt;/p>
&lt;p>简而言之，useCallback 在多次渲染中缓存一个函数，直至这个函数的依赖发生改变。&lt;/p>
&lt;h2 id="usecallback-与-usememo-有何关系">useCallback 与 useMemo 有何关系？
&lt;/h2>&lt;p>useMemo 经常与 useCallback 一同出现。当尝试优化子组件时，它们都很有用。他们会 记住（或者说，缓存）正在传递的东西：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-gdscript3" data-lang="gdscript3">&lt;span class="line">&lt;span class="ln"> 1&lt;/span>&lt;span class="cl">&lt;span class="n">import&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="n">useMemo&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">useCallback&lt;/span> &lt;span class="p">}&lt;/span> &lt;span class="n">from&lt;/span> &lt;span class="s1">&amp;#39;react&amp;#39;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 2&lt;/span>&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 3&lt;/span>&lt;span class="cl">&lt;span class="n">function&lt;/span> &lt;span class="n">ProductPage&lt;/span>&lt;span class="p">({&lt;/span> &lt;span class="n">productId&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">referrer&lt;/span> &lt;span class="p">})&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 4&lt;/span>&lt;span class="cl"> &lt;span class="k">const&lt;/span> &lt;span class="n">product&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">useData&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;/product/&amp;#39;&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">productId&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 5&lt;/span>&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 6&lt;/span>&lt;span class="cl"> &lt;span class="k">const&lt;/span> &lt;span class="n">requirements&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">useMemo&lt;/span>&lt;span class="p">(()&lt;/span> &lt;span class="o">=&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="o">//&lt;/span>&lt;span class="err">调用函数并缓存结果&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 7&lt;/span>&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">computeRequirements&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">product&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 8&lt;/span>&lt;span class="cl"> &lt;span class="p">},&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="n">product&lt;/span>&lt;span class="p">]);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 9&lt;/span>&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">10&lt;/span>&lt;span class="cl"> &lt;span class="k">const&lt;/span> &lt;span class="n">handleSubmit&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">useCallback&lt;/span>&lt;span class="p">((&lt;/span>&lt;span class="n">orderDetails&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">=&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="o">//&lt;/span> &lt;span class="err">缓存函数本身&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">11&lt;/span>&lt;span class="cl"> &lt;span class="n">post&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;/product/&amp;#39;&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">productId&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="s1">&amp;#39;/buy&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">12&lt;/span>&lt;span class="cl"> &lt;span class="n">referrer&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">13&lt;/span>&lt;span class="cl"> &lt;span class="n">orderDetails&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">14&lt;/span>&lt;span class="cl"> &lt;span class="p">});&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">15&lt;/span>&lt;span class="cl"> &lt;span class="p">},&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="n">productId&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">referrer&lt;/span>&lt;span class="p">]);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">16&lt;/span>&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">17&lt;/span>&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="p">(&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">18&lt;/span>&lt;span class="cl"> &lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">div&lt;/span> &lt;span class="n">className&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="n">theme&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">19&lt;/span>&lt;span class="cl"> &lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">ShippingForm&lt;/span> &lt;span class="n">requirements&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="n">requirements&lt;/span>&lt;span class="p">}&lt;/span> &lt;span class="n">onSubmit&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="n">handleSubmit&lt;/span>&lt;span class="p">}&lt;/span> &lt;span class="o">/&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">20&lt;/span>&lt;span class="cl"> &lt;span class="o">&amp;lt;/&lt;/span>&lt;span class="n">div&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">21&lt;/span>&lt;span class="cl"> &lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">22&lt;/span>&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>区别在于你需要缓存 什么:&lt;/p>
&lt;ul>
&lt;li>useMemo 缓存函数调用的结果。在这里，它缓存了调用 computeRequirements(product) 的结果。除非 product 发生改变，否则它将不会发生变化。这让你向下传递 requirements 时而无需不必要地重新渲染 ShippingForm。必要时，React 将会调用传入的函数重新计算结果。&lt;/li>
&lt;li>useCallback 缓存函数本身。不像 useMemo，它不会调用你传入的函数。相反，它缓存此函数。从而除非 productId 或 referrer 发生改变，handleSubmit 自己将不会发生改变。这让你向下传递 handleSubmit 函数而无需不必要地重新渲染 ShippingForm。直至用户提交表单，你的代码都将不会运行。&lt;/li>
&lt;/ul>
&lt;p>如果你已经熟悉了 useMemo，你可能发现将 useCallback 视为以下内容会很有帮助：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="ln">1&lt;/span>&lt;span class="cl">// 在 React 内部的简化实现
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">2&lt;/span>&lt;span class="cl">function useCallback(fn, dependencies) {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">3&lt;/span>&lt;span class="cl"> return useMemo(() =&amp;gt; fn, dependencies);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">4&lt;/span>&lt;span class="cl">}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>关于TCP/UDP的笔记</title><link>https://blog.ltlyl.fun/p/%E5%85%B3%E4%BA%8Etcp/udp%E7%9A%84%E7%AC%94%E8%AE%B0/</link><pubDate>Thu, 20 Feb 2025 16:16:09 +0800</pubDate><guid>https://blog.ltlyl.fun/p/%E5%85%B3%E4%BA%8Etcp/udp%E7%9A%84%E7%AC%94%E8%AE%B0/</guid><description>&lt;h2 id="前言">前言
&lt;/h2>&lt;p>关于 TCP/UDP 的笔记。&lt;/p>
&lt;p>希望这些笔记不仅能帮助自己系统梳理知识，也能为其他学习计算机网络的朋友提供借鉴。&lt;/p>
&lt;p>PS 不定时更新，欢迎讨论区留言。&lt;/p>
&lt;h2 id="什么是-tcp">什么是 TCP？
&lt;/h2>&lt;p>TCP 是⾯向连接的、可靠的、基于字节流的传输层通信协议。&lt;/p>
&lt;ol>
&lt;li>
&lt;p>&lt;strong>面向连接&lt;/strong>&lt;br>
在发送数据之前，通信双方会先通过一个称为“三次握手”（3-way handshake）的过程建立一条可靠的传输连接。只有连接建立完成后，数据传输才能开始。是一对一的，不能像 UDP 一样一对多。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>可靠传输&lt;/strong>&lt;br>
TCP 使用数据确认（ACK）、超时重传、重复确认（Duplicate ACK）等机制，确保数据包能够按顺序、完整地到达接收端。如果发生数据丢失或出错，TCP 能够自动进行重传，保证传输的可靠性。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>面向字节流&lt;/strong>&lt;br>
TCP 将数据视为连续的字节流，而不是独立的数据包。这意味着在应用层数据的边界需要进行额外管理，例如通过消息分隔符或固定长度来标识每个独立的消息。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h2 id="tcp-与-udp-对比表">TCP 与 UDP 对比表
&lt;/h2>&lt;table>
&lt;thead>
&lt;tr>
&lt;th>&lt;strong>方面&lt;/strong>&lt;/th>
&lt;th>&lt;strong>TCP&lt;/strong>&lt;/th>
&lt;th>&lt;strong>UDP&lt;/strong>&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>面向连接&lt;/td>
&lt;td>是，需要建立连接（三次握手）后才能进行数据传输&lt;/td>
&lt;td>否，无连接，数据直接发送&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>数据可靠性&lt;/td>
&lt;td>高，具备数据确认、重传机制、累积确认和错误校验等措施，确保数据准确无误到达&lt;/td>
&lt;td>低，无内建确认和重传机制，数据可能丢失或乱序&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>数据顺序&lt;/td>
&lt;td>保证按发送顺序到达&lt;/td>
&lt;td>不保证顺序，数据包独立传输&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>流量控制&lt;/td>
&lt;td>采用滑动窗口机制，根据接收方缓冲区大小动态控制数据发送速率&lt;/td>
&lt;td>无，发送数据完全由应用层控制，可能导致接收端被淹没&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>拥塞控制&lt;/td>
&lt;td>有，使用慢启动、拥塞避免、快速重传与快速恢复等算法，动态调整发送速率以应对网络拥塞&lt;/td>
&lt;td>无，不具备拥塞控制，可能在网络繁忙时频繁丢包&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>错误检测与恢复&lt;/td>
&lt;td>有，通过校验和及确认机制检测错误，并通过重传恢复丢失的数据&lt;/td>
&lt;td>仅有基本的校验和，不能进行错误恢复&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>头部开销&lt;/td>
&lt;td>较大，TCP 头部通常为 20 字节或以上，包含丰富的控制信息&lt;/td>
&lt;td>较小，仅 8 字节，结构简单&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>连接管理&lt;/td>
&lt;td>复杂，需经过三次握手建立连接及四次挥手断开连接，带来额外延时和资源开销&lt;/td>
&lt;td>简单，无需连接建立和断开，适用于快速传输&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>实时性&lt;/td>
&lt;td>相对较低，其可靠性保障和拥塞控制可能导致延迟上升，通常不适用于对延迟极度敏感的场景&lt;/td>
&lt;td>高，延迟低，适合实时视频、在线游戏、VoIP 等对时效性要求较高的应用&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>适用场景&lt;/td>
&lt;td>文件传输、网页浏览、电子邮件、数据库通信等需要高可靠性和数据顺序保证的应用&lt;/td>
&lt;td>实时通讯、视频会议、在线游戏、DNS 查询、流媒体传输等可以容忍部分数据丢失，但要求低延迟的场景&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h2 id="tcp-和-udp-可以使同个端吗">TCP 和 UDP 可以使⽤同⼀个端⼝吗？
&lt;/h2>&lt;p>可以的。&lt;/p>
&lt;p>在数据链路层中，通过 MAC 地址来寻找局域网中的主机。在网际层中，通过 IP 地址来寻找网络中互连的主机或路由器。在传输层中，需要通过端口进行寻址，来识别同一计算机中同时通信的不同应用程序。&lt;/p>
&lt;p>所以，传输层的「端口号」的作用，是为了区分同一个主机上不同应用程序的数据包。&lt;/p>
&lt;p>传输层有两个传输协议分别是 TCP 和 UDP，在内核中是两个完全独立的软件模块。&lt;/p>
&lt;p>当主机收到数据包后，可以在 IP 包头的「协议号」字段知道该数据包是 TCP/UDP，所以可以根据这个信息确定送给哪个模块（TCP/UDP）处理，送给 TCP/UDP 模块的报文根据「端口号」确定送给哪个应用程序处理。&lt;/p>
&lt;h2 id="序列号seq和初始序列号isn">序列号(SEQ)和初始序列号(ISN)
&lt;/h2>&lt;p>序列号，是 TCP 一个头部字段，标识了 TCP 发送端到 TCP 接收端的数据流的一个字节，因为 TCP
是面向字节流的可靠协议，为了保证消息的顺序性和可靠性，TCP 为每个传输方向上的每个字节都赋
予了一个编号，以便于传输成功后确认、丢失后重传以及在接收端保证不会乱序。序列号是一个 32
位的无符号数，因此在到达 4G 之后再循环回到 0。&lt;/p>
&lt;p>初始序列号，在 TCP 建立连接的时候，客户端和服务端都会各自生成一个初始序列号，它是基于时
钟生成的一个随机数，来保证每个连接都拥有不同的初始序列号。初始化序列号可被视为一个 32 位
的计数器，该计数器的数值每 4 微秒加 1，循环一次需要 4.55 小时。&lt;/p>
&lt;h2 id="tcp-三次握手过程">TCP 三次握手过程
&lt;/h2>&lt;p>TCP 三次握手（Three-Way Handshake）是建立一个可靠的 TCP 连接的过程，通过交换控制信息来初始化连接参数。下面是详细的步骤：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>&lt;strong>第一次握手（SYN）&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>客户端向服务器发送一个带有 SYN 标志的报文段，该报文段包含客户端选择的初始序列号（ISN）。&lt;/li>
&lt;li>该报文段表示客户端希望与服务器建立连接。&lt;/li>
&lt;li>表示形式：
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="ln">1&lt;/span>&lt;span class="cl">客户端 → 服务器: SYN, Seq = x
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>第二次握手（SYN-ACK）&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>服务器收到客户端的 SYN 后，发送一个包含 SYN 和 ACK 标志的报文段给客户端。&lt;/li>
&lt;li>该报文段中，ACK 用来确认收到客户端的 SYN（Ack = x + 1），同时服务器也选择一个初始序列号（ISN = y）来建立自己的连接参数。&lt;/li>
&lt;li>表示形式：
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="ln">1&lt;/span>&lt;span class="cl">服务器 → 客户端: SYN, ACK, Seq = y, Ack = x + 1
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>第三次握手（ACK）&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>客户端在收到服务器的 SYN-ACK 后，再发送一个只带 ACK 标志的报文段，作为对服务器响应的确认。&lt;/li>
&lt;li>该报文段中的 ACK 用来确认收到服务器的 SYN（Ack = y + 1）。&lt;/li>
&lt;li>表示形式：
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="ln">1&lt;/span>&lt;span class="cl">客户端 → 服务器: ACK, Seq = x + 1, Ack = y + 1
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;p>当服务器收到这个 ACK 后，双方就建立了一个可靠的 TCP 连接，可以进行后续数据传输了。&lt;/p>
&lt;h2 id="为什么需要三次握手而不是两次或四次">为什么需要三次握手，而不是两次或四次？
&lt;/h2>&lt;p>「两次握⼿」：⽆法防⽌历史连接的建⽴，会造成双方资源的浪费，也⽆法可靠的同步双⽅序列号。&lt;/p>
&lt;p>「四次握⼿」：三次握⼿就已经理论上最少可靠连接建⽴，所以不需要使⽤更多的通信次数。&lt;/p>
&lt;h2 id="tcp-握手丢失情况">TCP 握手丢失情况
&lt;/h2>&lt;h3 id="tcp-第一次握手丢失的情况">TCP 第一次握手丢失的情况
&lt;/h3>&lt;p>当第一次握手丢失时，TCP 将通过重传策略来尝试恢复连接，但如果问题持续存在，连接将建立失败并反馈错误信息给应用程序。&lt;/p>
&lt;h3 id="tcp-第二次握手丢失的情况">TCP 第二次握手丢失的情况
&lt;/h3>&lt;p>当第二次握手丢失了，客户端和服务端都会重传。&lt;/p>
&lt;ul>
&lt;li>
&lt;p>客户端会重传 SYN 报文，也就是第一次握手，最大重传次数由内核参数决定。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>服务端会重传 SYN-ACK 报文，也就是第二次握手，最大重传次数由内核参数决定。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h3 id="tcp-第三次握手丢失的情况">TCP 第三次握手丢失的情况
&lt;/h3>&lt;p>ACK 报文是不会有重传的，当 ACK 丢失了，就由对方重传对应的报文。直到收到第三次握⼿，或者达到最⼤重传次数。&lt;/p>
&lt;h2 id="tcp-四次挥手过程">TCP 四次挥手过程
&lt;/h2>&lt;ol>
&lt;li>
&lt;p>&lt;strong>第一次挥手（FIN）&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>客户端在没有数据发送后，向服务器发送一个带有 FIN 标志的报文段，以指示客户端不再有数据要发送。&lt;/li>
&lt;li>表示形式：
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="ln">1&lt;/span>&lt;span class="cl">客户端 → 服务器: FIN, Seq = u
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>第二次挥手（ACK）&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>服务器收到客户端的 FIN 报文段后，立即发送一个 ACK 报文段作为确认，表明已接收到客户端停止发送数据的请求。&lt;/li>
&lt;li>表示形式：
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="ln">1&lt;/span>&lt;span class="cl">服务器 → 客户端: ACK, Seq = v, Ack = u + 1
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>此时，服务器可能仍有未传输完的数据，故数据传输方向上尚未完全关闭。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>第三次挥手（FIN）&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>当服务器完成剩余数据的传输后，会向客户端发送一个带有 FIN 标志的报文段，通知客户端服务器也没有数据要发送了，准备关闭连接。&lt;/li>
&lt;li>表示形式：
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="ln">1&lt;/span>&lt;span class="cl">服务器 → 客户端: FIN, Seq = w
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>第四次挥手（ACK）&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>客户端收到服务器的 FIN 报文段后，发送一个 ACK 报文段以确认收到服务器关闭连接的请求。&lt;/li>
&lt;li>表示形式：
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="ln">1&lt;/span>&lt;span class="cl">客户端 → 服务器: ACK, Seq = u + 1, Ack = w + 1
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;h2 id="为什么-tcp-挥手需要四次">为什么 TCP 挥手需要四次？
&lt;/h2>&lt;p>TCP 使用四次挥手断开连接，主要原因在于 TCP 连接是全双工的，也就是数据传输在两个方向上是独立的。在断开连接时，每个方向的数据传输都需要单独关闭。下面详细解释这一过程以及四次挥手的必要性：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>&lt;strong>单向关闭&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>当一方准备结束数据发送时，它只关闭自己的发送通道，但仍可接收数据。&lt;/li>
&lt;li>例如，当客户端发送一个 FIN 时，它表示自己没有数据要发送了，但仍然可以接收服务器的数据。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>独立的确认&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>对于第一次 FIN（例如客户端发送的 FIN），服务器需要发送一个 ACK 来确认已经收到关闭请求。这只是对单个方向（客户端到服务器）的关闭确认。&lt;/li>
&lt;li>接下来，服务器完成自身数据发送后，也需要发送 FIN 来关闭其发送通道，客户端再对其进行确认。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>为何需要四次&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>第一步（客户端 FIN）：客户端通知服务器“我已经没有数据要发送了”。&lt;/li>
&lt;li>第二步（服务器 ACK）：服务器确认客户端的 FIN，并告知已接收，但此时仍可继续发送数据给客户端。&lt;/li>
&lt;li>第三步（服务器 FIN）：当服务器也结束发送数据后，它通知客户端“我也没有数据要发送了”。&lt;/li>
&lt;li>第四步（客户端 ACK）：客户端确认服务器的关闭请求，整个连接才能完全关闭。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>可靠的连接终止&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>四次挥手确保了双方在断开连接前都能完成数据传输与确认，避免数据丢失。&lt;/li>
&lt;li>这种设计使得双方可以独立地结束各自的数据传输，从而达到安全、可靠地断开连接的目的。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;h2 id="什么情况会出现三次挥手">什么情况会出现三次挥手？
&lt;/h2>&lt;p>当被动关闭方在 TCP 挥手过程中，如果「没有数据要发送」，同时「没有开启 TCP_QUICKACK(默认情
况就是没有开启，没有开启 TCP_QUICKACK，等于就是在使用 TCP 延迟确认机制)」，那么第二和第三
次挥手就会合并传输，这样就出现了三次挥手。&lt;/p>
&lt;h2 id="tcp-挥手丢失情况">TCP 挥手丢失情况
&lt;/h2>&lt;h3 id="tcp-第一次挥手丢失的情况">TCP 第一次挥手丢失的情况
&lt;/h3>&lt;p>当 TCP 第一次挥手的 FIN 报文丢失时，连接不会被立即关闭。主动关闭方会依赖重传机制来确保 FIN 最终传达到对方，一旦双方完成重传和确认，连接才会进入正常的终止流程。&lt;/p>
&lt;h3 id="tcp-第二次挥手丢失的情况">TCP 第二次挥手丢失的情况
&lt;/h3>&lt;p>ACK 报文是不会重传的，所以如果服务端的第二次挥手丢失了，客户端就会触发超时重传机制，重传 FIN 报文，直到收到服务端的第二次挥手，或者达到最大的重传次数。&lt;/p>
&lt;h3 id="tcp-第三次挥手丢失的情况">TCP 第三次挥手丢失的情况
&lt;/h3>&lt;p>当服务端重传第三次挥手报文的次数达到了 3 次后，由于 tcp_orphan_retries 为 3，达到了重传最大次数，于是再等待一段时间(时间为上一次超时时间的 2 倍)，如果还是没能收到客户端的第四次挥手(ACK 报文)，那么服务端就会断开连接。&lt;/p>
&lt;p>客户端因为是通过 close 函数关闭连接的，处于 FIN WAIT 2 状态是有时长限制的，如果 tcp_fin_timeout 时间内还是没能收到服务端的第三次挥手(FIN 报文)，那么客户端就会断开连接。&lt;/p>
&lt;h3 id="tcp-第四次挥手丢失的情况">TCP 第四次挥手丢失的情况
&lt;/h3>&lt;p>当服务端重传第三次挥手报文达到 2 时，由于 tcp_orphan_retries 为 2，达到了最大重传次数，于是再等待一段时间(时间为上一次超时时间的 2 倍)，如果还是没能收到客户端的第四次挥手(ACK 报文)，那么服务端就会断开连接。&lt;/p>
&lt;p>客户端在收到第三次挥手后，就会进入 TIME WAIT 状态，开启时长为 2MSL 的定时器，如果途中再次收到第三次挥手(FIN 报文)后，就会重置定时器，当等待 2MSL 时长后，客户端就会断开连接。&lt;/p>
&lt;h2 id="为什么需要-time_wait-状态">为什么需要 TIME_WAIT 状态？
&lt;/h2>&lt;p>防止历史连接中的数据，被后面相同四元组的连接错误的接收。&lt;/p>
&lt;p>保证「被动关闭连接」的一方，能被正确的关闭。&lt;/p>
&lt;h2 id="为什么每次建立-tcp-连接时初始化的序列号都要求不一样">为什么每次建立 TCP 连接时，初始化的序列号都要求不一样？
&lt;/h2>&lt;ol>
&lt;li>
&lt;p>&lt;strong>防止旧数据干扰&lt;/strong>&lt;br>
如果使用固定或者可预测的序列号，网络中可能还残留有上一次连接的数据包，在新连接建立后，这些旧数据包可能会被误认为是当前连接的数据，从而导致数据混乱或连接异常。选择唯一的 ISN 可以避免这种数据干扰问题。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>确保数据流正确排序&lt;/strong>&lt;br>
TCP 是一个面向字节流的协议，双方通过序列号来组织和排序数据。当每次连接的序列号都不相同时，可以确保即使出现重传或者网络延迟，接收方也能正确地将数据包按正确的顺序进行排序和重组。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>增强安全性&lt;/strong>&lt;br>
可预测的序列号可能给攻击者提供利用的机会，例如 TCP 序列号预测攻击。因此，每次连接都使用一个不容易预测的初始序列号，可以有效提升连接的安全性，降低恶意攻击的风险。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>区分不同连接&lt;/strong>&lt;br>
在同一对主机之间可能会在短时间内建立多个 TCP 连接。通过为每个连接选择不同的 ISN，可以帮助系统区分并管理这些连接，防止连接状态混淆。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h2 id="什么是-mtu">什么是 MTU
&lt;/h2>&lt;p>最大传输单元（英语：Maximum Transmission Unit，缩写 MTU）是指数据链路层上面所能通过的最大数据包大小（以字节为单位）。&lt;/p>
&lt;h2 id="什么是-mss">什么是 MSS？
&lt;/h2>&lt;p>最大分段大小（Maximum Segment Size）是传输控制协议的一个参数，以字节数定义一个计算机或通信设备所能接受的分段的最大数据量。 它并不会计算 TCP 或 IP 协议头的大小。即最大传输单元除去信头后的最大数据量。&lt;/p>
&lt;h2 id="为什么-tcp-层需要-mss">为什么 TCP 层需要 MSS？
&lt;/h2>&lt;ol>
&lt;li>
&lt;p>&lt;strong>降低 IP 分片的开销和风险&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>&lt;strong>分片开销&lt;/strong>：IP 分片不仅增加了每个数据包在网络上传输时的负担，还会影响路由器和接收主机的处理效率。每个分片都需要单独处理，如果分片过多，会导致额外的延时和资源消耗。&lt;/li>
&lt;li>&lt;strong>分片丢失问题&lt;/strong>：如果 IP 分片中的任一碎片丢失，整个数据包都必须重新传输。而且某些网络设备可能不支持 IP 分片或安全策略会丢弃分片，导致传输失败。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>提高传输效率与可靠性&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>&lt;strong>匹配底层网络 MTU&lt;/strong>：TCP 在连接建立时协商并计算对端的 MSS，通常依据路径 MTU（Path MTU）来计算。这样可以确保 TCP 报文段在封装进 IP 数据报之后，不会超出最低链路的 MTU，从而避免触发 IP 分片。&lt;/li>
&lt;li>&lt;strong>优化数据传输&lt;/strong>：合理的 MSS 可以使得每个 TCP 报文段刚好适应底层网络的 MTU，最大限度地利用网络带宽，确保传输的连续性和高效性。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>简化错误处理&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>使用 MSS 限制 TCP 报文段大小可以降低由于 IP 分片引起的重传和错误处理的复杂度。如果发生数据丢失，整个 TCP 报文段丢失时，只需要重传一个比较小的单元，而不是一个由多个分片组成的大数据包。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>协商与兼容性&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>在 TCP 三次握手过程中，双方会交换 MSS 值，明确双方所能接受的最大报文段大小。这种协商有助于两端在一个共同的限制下进行通信，从而确保数据传输更加稳定和兼容不同网络环境。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;h2 id="tcp-的粘包拆包以及解决方案">TCP 的粘包、拆包以及解决方案
&lt;/h2>&lt;p>&lt;img src="https://blog.ltlyl.fun/p/%E5%85%B3%E4%BA%8Etcp/udp%E7%9A%84%E7%AC%94%E8%AE%B0/%E7%B2%98%E5%8C%85%E6%8B%86%E5%8C%85.jpeg"
width="1568"
height="1182"
srcset="https://blog.ltlyl.fun/p/%E5%85%B3%E4%BA%8Etcp/udp%E7%9A%84%E7%AC%94%E8%AE%B0/%E7%B2%98%E5%8C%85%E6%8B%86%E5%8C%85_hu_59cd60b8110afc0d.jpeg 480w, https://blog.ltlyl.fun/p/%E5%85%B3%E4%BA%8Etcp/udp%E7%9A%84%E7%AC%94%E8%AE%B0/%E7%B2%98%E5%8C%85%E6%8B%86%E5%8C%85_hu_2c3837d336d7b176.jpeg 1024w"
loading="lazy"
alt="粘包拆包"
class="gallery-image"
data-flex-grow="132"
data-flex-basis="318px"
>&lt;/p>
&lt;p>上图中演示了以下几种情况：&lt;/p>
&lt;ul>
&lt;li>正常的理想情况，两个包恰好满足 TCP 缓冲区的大小或达到 TCP 等待时长，分别发送两个包；&lt;/li>
&lt;li>粘包：两个包较小，间隔时间短，发生粘包，合并成一个包发送；&lt;/li>
&lt;li>拆包：一个包过大，超过缓存区大小，拆分成两个或多个包发送；&lt;/li>
&lt;li>拆包和粘包：Packet1 过大，进行了拆包处理，而拆出去的一部分又与 Packet2 进行粘包处理。&lt;/li>
&lt;/ul>
&lt;h3 id="什么是粘包">什么是粘包？
&lt;/h3>&lt;p>指 TCP 协议中，发送方发送的若干包数据到接收方接收时粘成一包，从接收缓冲区看，后一包数据的头紧接着前一包数据的尾。&lt;/p>
&lt;p>TCP 是面向字节流的协议，就是没有界限的一串数据，本没有“包”的概念，“粘包”和“拆包”一说是为了有助于形象地理解这两种现象。&lt;/p>
&lt;h3 id="为什么-udp-没有粘包">为什么 UDP 没有粘包？
&lt;/h3>&lt;p>粘包拆包问题在数据链路层、网络层以及传输层都有可能发生。日常的网络应用开发大都在传输层进行，由于 UDP 有消息保护边界，不会发生粘包拆包问题，因此粘包拆包问题只发生在 TCP 协议中。&lt;/p>
&lt;h3 id="粘包拆包发生场景">粘包拆包发生场景
&lt;/h3>&lt;p>因为 TCP 是面向流，没有边界，而操作系统在发送 TCP 数据时，会通过缓冲区来进行优化，例如缓冲区为 1024 个字节大小。&lt;/p>
&lt;p>如果一次请求发送的数据量比较小，没达到缓冲区大小，TCP 则会将多个请求合并为同一个请求进行发送，这就形成了粘包问题。&lt;/p>
&lt;p>如果一次请求发送的数据量比较大，超过了缓冲区大小，TCP 就会将其拆分为多次发送，这就是拆包。&lt;/p>
&lt;h3 id="常见的解决方案">常见的解决方案
&lt;/h3>&lt;ul>
&lt;li>发送端将每个包都封装成固定的长度，比如 100 字节大小。如果不足 100 字节可通过补 0 或空等进行填充到指定长度；&lt;/li>
&lt;li>发送端在每个包的末尾使用固定的分隔符，例如\r\n。如果发生拆包需等待多个包发送过来之后再找到其中的\r\n 进行合并；例如，FTP 协议；&lt;/li>
&lt;li>将消息分为头部和消息体，头部中保存整个消息的长度，只有读取到足够长度的消息之后才算是读到了一个完整的消息；&lt;/li>
&lt;li>通过自定义协议进行粘包和拆包的处理。&lt;/li>
&lt;/ul>
&lt;h2 id="重传机制">重传机制
&lt;/h2>&lt;h3 id="超时重传以时间驱动">超时重传（以时间驱动）
&lt;/h3>&lt;p>RTT 指的是数据发送时刻到接收到确认的时刻的差值，也就是包的往返时间。&lt;/p>
&lt;p>超时重传时间是以 RTO(Retransmission Timeout 超时重传时间)表示。&lt;/p>
&lt;p>当超时时间 RTO 较大时，重发就慢，丢了老半天才重发，没有效率，性能差。&lt;/p>
&lt;p>当超时时间 RTO 较小时，会导致可能并没有丢就重发，于是重发的就快，会增加网络拥塞，导致更多的超时，更多的超时导致更多的重发。&lt;/p>
&lt;p>根据上述的两种情况，我们可以得知，超时重传时间 RTO 的值应该略大于报文往返 RTT 的值。&lt;/p>
&lt;h3 id="快速重传以数据驱动">快速重传（以数据驱动）
&lt;/h3>&lt;p>发送方发出了 1，2，3，4，5 份数据:
第一份 Seq1 先送到了，于是就 Ack 回 2;结果 Seq2 因为某些原因没收到，Seq3 到达了，于是还是 Ack 回 2;后面的 Seq4 和 Seq5 都到了，但还是 Ack 回 2 因为 Seq2 还是没有收到。&lt;/p>
&lt;p>发送端收到了三个 Ack =2 的确认，知道了 Seq2 还没有收到，就会在定时器过期之前，重传丢失的 Seq2。&lt;/p>
&lt;p>最后，收到了 Seq2，此时因为 Seq3，Seq4，Seq5 都收到了，于是 Ack 回 6。&lt;/p>
&lt;p>所以，快速重传的工作方式是当收到三个相同的 ACK 报文时，会在定时器过期之前，重传丢失的报文段。&lt;/p>
&lt;p>快速重传机制只解决了一个问题，就是超时时间的问题，但是它依然面临着另外一个问题。就是重传的时候，是重传一个，还是重传所有的问题。&lt;/p>
&lt;h3 id="sack-方法">SACK 方法
&lt;/h3>&lt;p>这种方式需要在 TCP 头部「选项」字段里加一个 SACK 的东西，它可以将已收到的数据的信息发送给「发送方」，这样发送方就可以知道哪些数据收到了，哪些数据没收到，知道了这些信息，就可以只重传丢失的数据。&lt;/p>
&lt;h3 id="duplicate-sack-方法">Duplicate SACK 方法
&lt;/h3>&lt;p>Duplicate SACK 又称 D-SACK ，其主要使用了 SACK 来告诉「发送方」有哪些数据被重复接收了。&lt;/p>
&lt;h2 id="滑动窗口">滑动窗口
&lt;/h2>&lt;p>TCP 滑动窗口是一种流量控制机制，用于管理在发送端和接收端之间传输的数据量，其基本原理如下：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>&lt;strong>发送窗口&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>发送端维护一个窗口，表示允许发送但尚未收到确认的数据范围。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>接收窗口&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>接收端根据自身缓冲区大小，通过 ACK 报文告知发送端当前可接收的数据量，这就是接收窗口。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>窗口滑动&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>当发送端收到 ACK 确认后，窗口向前移动，释放已确认的数据位置，从而可以继续发送新的数据。&lt;/li>
&lt;li>这种“滑动”过程确保了数据的连续传输，同时防止发送端发送过多数据导致接收端溢出。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;h2 id="流量控制">流量控制
&lt;/h2>&lt;p>TCP 流量控制是一种确保数据传输双方保持平衡的机制。其主要目标是：&lt;/p>
&lt;ul>
&lt;li>&lt;strong>保护接收端&lt;/strong>：避免发送速率超过接收端处理能力，防止数据丢失或缓冲区溢出。&lt;/li>
&lt;li>&lt;strong>动态调整数据流&lt;/strong>：通过接收端反馈的窗口大小，发送端能够动态决定一次可以发送多少数据，确保高效且稳定的数据传输。&lt;/li>
&lt;/ul>
&lt;p>简单来说，TCP 流量控制就是通过交换窗口大小信息，使发送方根据接收方的当前处理能力来决定发送数据的速率，从而保持整个数据传输过程的可靠性和高效性。&lt;/p>
&lt;h2 id="拥塞控制">拥塞控制
&lt;/h2>&lt;p>TCP 拥塞控制是一种确保网络稳定和高效的数据传输机制，其主要目标是：&lt;/p>
&lt;ul>
&lt;li>&lt;strong>预防网络拥塞&lt;/strong>：通过检测数据包丢失、延迟增大等现象，判断网络是否发生拥堵。&lt;/li>
&lt;li>&lt;strong>动态调整发送速率&lt;/strong>：在网络出现拥堵迹象时，降低发送窗口大小或发送速率；当网络状况改善时，逐步增加速率。&lt;/li>
&lt;li>&lt;strong>维护传输效率&lt;/strong>：在避免网络拥堵的同时，尽可能利用可用带宽实现高效的数据传输。&lt;/li>
&lt;/ul>
&lt;p>简单来说，TCP 拥塞控制就是通过动态调整数据发送速率来应对网络拥堵，确保数据传输既稳定又高效。&lt;/p></description></item><item><title>关于HTTP/HTTPS的笔记</title><link>https://blog.ltlyl.fun/p/%E5%85%B3%E4%BA%8Ehttp/https%E7%9A%84%E7%AC%94%E8%AE%B0/</link><pubDate>Thu, 20 Feb 2025 12:26:09 +0800</pubDate><guid>https://blog.ltlyl.fun/p/%E5%85%B3%E4%BA%8Ehttp/https%E7%9A%84%E7%AC%94%E8%AE%B0/</guid><description>&lt;h2 id="前言">前言
&lt;/h2>&lt;p>关于 HTTP/HTTPS 的笔记。&lt;/p>
&lt;p>希望这些笔记不仅能帮助自己系统梳理知识，也能为其他学习计算机网络的朋友提供借鉴。&lt;/p>
&lt;p>PS 不定时更新，欢迎讨论区留言。&lt;/p>
&lt;h2 id="http-是什么">HTTP 是什么？
&lt;/h2>&lt;p>HTTP 是一个在计算机世界里专门在【两点】之间【传输】文字、图片、音频、视频等【超文本】数据的【约定和规范】。&lt;/p>
&lt;h2 id="常见的-http-状态码">常见的 HTTP 状态码
&lt;/h2>&lt;p>HTTP 状态码通常分为五大类：1xx、2xx、3xx、4xx 和 5xx，每一类代表一种响应类别。以下是一些常见的状态码：&lt;/p>
&lt;h3 id="1xx信息性状态码">1xx（信息性状态码）
&lt;/h3>&lt;ul>
&lt;li>&lt;strong>100 Continue&lt;/strong>：继续发送请求的剩余部分。&lt;/li>
&lt;li>&lt;strong>101 Switching Protocols&lt;/strong>：服务器正在根据客户端的请求切换协议。&lt;/li>
&lt;/ul>
&lt;h3 id="2xx成功状态码">2xx（成功状态码）
&lt;/h3>&lt;ul>
&lt;li>&lt;strong>200 OK&lt;/strong>：请求成功，服务器返回请求的数据。&lt;/li>
&lt;li>&lt;strong>201 Created&lt;/strong>：请求成功，服务器创建了新的资源。&lt;/li>
&lt;li>&lt;strong>202 Accepted&lt;/strong>：请求已接受，但处理尚未完成。&lt;/li>
&lt;li>&lt;strong>204 No Content&lt;/strong>：请求成功，但没有内容返回。&lt;/li>
&lt;/ul>
&lt;h3 id="3xx重定向状态码">3xx（重定向状态码）
&lt;/h3>&lt;ul>
&lt;li>&lt;strong>301 Moved Permanently&lt;/strong>：请求的资源已被永久移动到新位置。&lt;/li>
&lt;li>&lt;strong>302 Found&lt;/strong>：请求的资源临时从不同的 URI 响应。&lt;/li>
&lt;li>&lt;strong>304 Not Modified&lt;/strong>：资源未修改，客户端可继续使用缓存的版本。&lt;/li>
&lt;/ul>
&lt;h3 id="4xx客户端错误状态码">4xx（客户端错误状态码）
&lt;/h3>&lt;ul>
&lt;li>&lt;strong>400 Bad Request&lt;/strong>：请求语法错误，服务器无法理解。&lt;/li>
&lt;li>&lt;strong>401 Unauthorized&lt;/strong>：请求要求身份验证。&lt;/li>
&lt;li>&lt;strong>403 Forbidden&lt;/strong>：服务器拒绝请求。&lt;/li>
&lt;li>&lt;strong>404 Not Found&lt;/strong>：请求的资源不存在。&lt;/li>
&lt;li>&lt;strong>405 Method Not Allowed&lt;/strong>：请求方法不被允许。&lt;/li>
&lt;li>&lt;strong>408 Request Timeout&lt;/strong>：请求超时。&lt;/li>
&lt;/ul>
&lt;h3 id="5xx服务器错误状态码">5xx（服务器错误状态码）
&lt;/h3>&lt;ul>
&lt;li>&lt;strong>500 Internal Server Error&lt;/strong>：服务器内部错误，无法完成请求。&lt;/li>
&lt;li>&lt;strong>501 Not Implemented&lt;/strong>：服务器不支持请求的功能。&lt;/li>
&lt;li>&lt;strong>502 Bad Gateway&lt;/strong>：作为网关或代理的服务器从上游服务器接收到无效响应。&lt;/li>
&lt;li>&lt;strong>503 Service Unavailable&lt;/strong>：服务器当前无法处理请求，通常是由于过载或维护。&lt;/li>
&lt;li>&lt;strong>504 Gateway Timeout&lt;/strong>：网关或代理服务器未及时从上游服务器收到响应。&lt;/li>
&lt;/ul>
&lt;h2 id="get-与-post">GET 与 POST
&lt;/h2>&lt;p>GET 的语义是请求获取指定的资源。GET 方法是安全、幂等、可被缓存的。&lt;/p>
&lt;p>POST 的语义是根据请求负荷（报文主体）对指定的资源做出处理，具体的处理方式视资源类型而不同。POST 不安全，不幂等，（大部分实现）不可缓存。&lt;/p>
&lt;h2 id="http-各个版本比较">HTTP 各个版本比较
&lt;/h2>&lt;p>HTTP（超文本传输协议）是 Web 通信的基础协议，随着互联网的发展，HTTP 协议经过多次演变。本文档将介绍常见的 HTTP 版本及其主要特性和区别。&lt;/p>
&lt;h3 id="http09">HTTP/0.9
&lt;/h3>&lt;ul>
&lt;li>&lt;strong>简介&lt;/strong>：是 HTTP 最早的版本，设计非常简单。&lt;/li>
&lt;li>&lt;strong>特点&lt;/strong>：
&lt;ul>
&lt;li>只支持 GET 方法。&lt;/li>
&lt;li>不支持消息头和状态码。&lt;/li>
&lt;li>主要用于获取简单的 HTML 文件。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>限制&lt;/strong>：功能非常受限，无法应对复杂的需求，如状态管理或内容协商。&lt;/li>
&lt;/ul>
&lt;h3 id="http10">HTTP/1.0
&lt;/h3>&lt;ul>
&lt;li>&lt;strong>简介&lt;/strong>：HTTP/1.0 在 1996 年作为 RFC 1945 发布，是对 HTTP/0.9 的扩展。&lt;/li>
&lt;li>&lt;strong>特点&lt;/strong>：
&lt;ul>
&lt;li>支持多种请求方法，如 GET、POST、HEAD。&lt;/li>
&lt;li>引入了状态码和响应头，使得响应内容更加丰富。&lt;/li>
&lt;li>每个请求后通常会关闭连接（非持久连接）。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>限制&lt;/strong>：
&lt;ul>
&lt;li>每次请求都需建立新的 TCP 连接，导致效率较低。&lt;/li>
&lt;li>不支持持久连接，无法处理多个请求。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="http11">HTTP/1.1
&lt;/h3>&lt;ul>
&lt;li>&lt;strong>简介&lt;/strong>：HTTP/1.1 在 1997 年发布（RFC 2068），经过多次修订，是目前应用最广泛的版本。&lt;/li>
&lt;li>&lt;strong>特点&lt;/strong>：
&lt;ul>
&lt;li>支持持久连接（Connection: keep-alive），可以在同一连接上发送多个请求。&lt;/li>
&lt;li>支持分块传输编码（chunked transfer encoding），使得数据流能够动态生成。&lt;/li>
&lt;li>引入了更多的请求方法和头部字段，如 OPTIONS、PUT、DELETE 等。&lt;/li>
&lt;li>支持管道化（pipelining），即可在同一个 TCP 连接里面，客户端可以发起多个请求，只要第一个请求发出去了，不必等其回来，就可以发第二个请求出去，可以减少整体响应时间。但是服务器必须按照接收请求的顺序发送对这些管道化请求的响应，如果服务端在处理 A 请求时耗时比较长，那么后续的请求的处理都会被阻塞住，这称为「队头堵塞」，所以，HTTP/1.1 管道解决了请求的队头阻塞，但是没有解决响应的队头阻塞。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>改进&lt;/strong>：相比于 HTTP/1.0, 在性能和灵活性上都有显著提升。&lt;/li>
&lt;/ul>
&lt;h3 id="http2">HTTP/2
&lt;/h3>&lt;ul>
&lt;li>
&lt;p>&lt;strong>简介&lt;/strong>：HTTP/2 在 2015 年作为 RFC 7540 发布，主要目标是提高性能和减少延迟。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>特点&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>基于二进制协议而不是文本协议，提高了解析效率和可靠性。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>支持多路复用（multiplexing），在单一 TCP 连接内同时发送多个请求和响应，减少了连接建立的开销。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>使用头部压缩（HPACK：在客户端和服务器同时维护一张头信息表，所有字段都会存入这个表，生成一个索引号，以后就不发送同样字段了，只发送索引号，这样就提高速度了），降低请求和响应头的传输量。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>支持服务器推送（Server Push），服务器可以主动推送资源到客户端，以减少等待时间。&lt;/p>
&lt;p>HTTP/2 通过 Stream 的并发能力，解决了 HTTP/1 队头阻塞的问题，看似很完美了，但是 HTTP/2 还是存在“队头阻塞”的问题，只不过问题不是在 HTTP 这一层面，而在 TCP 这一层。HTTP/2 是基于 TCP 协议来传输数据的，TCP 是字节流协议，TCP 层必须保证收到的字节数据是完整且连续的，这样内核才会将缓冲区里的数据返回给 HTTP 应用，那么当「前 1 个字节数据」没有到达时，后收到的字节数据只能存放在内核缓冲区里，只有等到这 1 个字节数据到达时，HTTP/2 应用层才能从内核中拿到数据，这就是 HTTP/2 队头阻塞问题。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="http3">HTTP/3
&lt;/h3>&lt;ul>
&lt;li>
&lt;p>&lt;strong>简介&lt;/strong>：HTTP/3 是 HTTP 协议的最新版本，目前处于快速发展阶段。HTTP/3 基于 QUIC 协议构建。&lt;/p>
&lt;p>HTTP/1.1 中的管道(pipeline)虽然解决了请求的队头阻塞，但是没有解决响应的队头阻塞，因为服务端需要按顺序响应收到的请求，如果服务端处理某个请求消耗的时间比较长，那么只能等响应完这个请求后，才能处理下一个请求，这属于 HTTP 层队头阻塞。HTTP/2 虽然通过多个请求复用一个 TCP 连接解决了 HTTP 的队头阻塞 ，但是一旦发生丢包，就会阻塞住所有的 HTTP 请求，这属于 TCP 层队头阻塞。HTTP/2 队头阻塞的问题是因为 TCP，所以 HTTP/3 把 HTTP 下层的 TCP 协议改成了 UDP!&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>特点&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>使用 QUIC 传输协议，基于 UDP 而非传统的 TCP。QUIC 结合了 TLS/SSL 加密功能，从而提高了安全性和连接建立速度。&lt;/li>
&lt;li>支持多路复用，不存在 TCP 队头阻塞问题，即使某个流遇到问题也不会影响其他流。&lt;/li>
&lt;li>连接恢复更快：在网络环境变化时（如网络切换），HTTP/3 能够更好地保持会话连续性。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>改进&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>提供了更低的延迟、更快的连接建立速度以及更加可靠的传输体验。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="总结">总结
&lt;/h3>&lt;table>
&lt;thead>
&lt;tr>
&lt;th>HTTP 版本&lt;/th>
&lt;th>特点或改进&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;strong>HTTP/0.9&lt;/strong>&lt;/td>
&lt;td>最基础，仅支持 GET 请求，功能极其简单。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>HTTP/1.0&lt;/strong>&lt;/td>
&lt;td>引入状态码和头部，但每次请求都关闭连接。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>HTTP/1.1&lt;/strong>&lt;/td>
&lt;td>支持持久连接和多种请求方法，大大提高了传输效率。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>HTTP/2&lt;/strong>&lt;/td>
&lt;td>通过二进制传输、多路复用、头部压缩和服务器推送等特性进一步提升性能。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>HTTP/3&lt;/strong>&lt;/td>
&lt;td>采用 QUIC 协议，改善了连接建立和多路复用的性能，尤其在高延迟或不稳定网络环境下表现优异。&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h2 id="http-与-https">HTTP 与 HTTPS
&lt;/h2>&lt;p>HTTP（超文本传输协议）和 HTTPS（安全超文本传输协议）是用于客户端与服务器之间通信的两种协议。它们在功能上相似，但在安全性和数据传输方式上存在重要区别。&lt;/p>
&lt;h3 id="http">HTTP
&lt;/h3>&lt;ul>
&lt;li>&lt;strong>定义&lt;/strong>：HTTP 是一种无状态、无连接的应用层协议，用于传输超文本（如 HTML）。&lt;/li>
&lt;li>&lt;strong>特点&lt;/strong>：
&lt;ul>
&lt;li>&lt;strong>无加密&lt;/strong>：数据以明文形式传输，易受到窃听和中间人攻击。&lt;/li>
&lt;li>&lt;strong>端口&lt;/strong>：默认使用 80 端口。&lt;/li>
&lt;li>&lt;strong>性能&lt;/strong>：由于传输简单，开销较小，但安全性不足。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>适用场景&lt;/strong>：适用于对数据安全性要求不高的场景或内部网络环境中。&lt;/li>
&lt;/ul>
&lt;h3 id="https">HTTPS
&lt;/h3>&lt;ul>
&lt;li>&lt;strong>定义&lt;/strong>：HTTPS 是基于 HTTP 协议并结合 TLS/SSL 加密层的安全传输协议。&lt;/li>
&lt;li>&lt;strong>特点&lt;/strong>：
&lt;ul>
&lt;li>&lt;strong>加密传输&lt;/strong>：通过 TLS/SSL 对数据进行加密，保护数据传输过程中不被窃取或篡改。&lt;/li>
&lt;li>&lt;strong>身份验证&lt;/strong>：服务器需要通过数字证书进行身份验证，增强了信任度。&lt;/li>
&lt;li>&lt;strong>数据完整性&lt;/strong>：提供数据完整性校验，可以检测数据在传输中的任何异常修改。&lt;/li>
&lt;li>&lt;strong>端口&lt;/strong>：默认使用 443 端口。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>适用场景&lt;/strong>：适用于要求高安全性的数据传输场景，如电子商务、在线银行、用户登录等。&lt;/li>
&lt;/ul>
&lt;h3 id="http-与-https-的比较">HTTP 与 HTTPS 的比较
&lt;/h3>&lt;table>
&lt;thead>
&lt;tr>
&lt;th>特性&lt;/th>
&lt;th>HTTP&lt;/th>
&lt;th>HTTPS&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>加密&lt;/td>
&lt;td>无加密，数据明文传输&lt;/td>
&lt;td>使用 TLS/SSL 加密，保障数据安全&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>默认端口&lt;/td>
&lt;td>80&lt;/td>
&lt;td>443&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>数据安全性&lt;/td>
&lt;td>低，易受中间人攻击和窃听&lt;/td>
&lt;td>高，数据在传输过程中受到保护&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>网站信任度&lt;/td>
&lt;td>通常用于公开信息传输，可以用在内容分发等场景&lt;/td>
&lt;td>增强了用户信任，搜索引擎排名也通常给予 HTTPS 网站更多优势&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>实施成本&lt;/td>
&lt;td>实现简单，无需额外配置&lt;/td>
&lt;td>需要购买或申请 TLS/SSL 证书，配置相对复杂&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3 id="tls-握手的简单描述">TLS 握手的简单描述
&lt;/h3>&lt;p>&lt;img src="https://blog.ltlyl.fun/p/%E5%85%B3%E4%BA%8Ehttp/https%E7%9A%84%E7%AC%94%E8%AE%B0/https.png"
width="1635"
height="873"
srcset="https://blog.ltlyl.fun/p/%E5%85%B3%E4%BA%8Ehttp/https%E7%9A%84%E7%AC%94%E8%AE%B0/https_hu_f0843c2b293ae3b9.png 480w, https://blog.ltlyl.fun/p/%E5%85%B3%E4%BA%8Ehttp/https%E7%9A%84%E7%AC%94%E8%AE%B0/https_hu_3df54ea33a8038c4.png 1024w"
loading="lazy"
alt="blibli 技术蛋老师视频截图"
class="gallery-image"
data-flex-grow="187"
data-flex-basis="449px"
>
&lt;a class="link" href="https://www.bilibili.com/video/BV1KY411x7Jp/?share_source=copy_web&amp;amp;vd_source=3b63c0fccbecf1d3b621910b49a7a8b3" title="blibli 技术蛋老师https视频"
target="_blank" rel="noopener"
>blibli 技术蛋老师 https 视频&lt;/a>&lt;/p>
&lt;ol>
&lt;li>
&lt;p>&lt;strong>ClientHello&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>客户端发起连接，发送 &lt;code>ClientHello&lt;/code> 消息。&lt;/li>
&lt;li>消息中包含客户端支持的 TLS 版本、加密套件以及一个随机数（Client Random）。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>ServerHello 与服务器认证&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>服务器收到 &lt;code>ClientHello&lt;/code> 后，回复 &lt;code>ServerHello&lt;/code> 消息，确认 TLS 版本和加密套件，并提供自己的随机数（Server Random）。&lt;/li>
&lt;li>同时，服务器发送数字证书（Certificate），用于证明其身份（可选：还会发送密钥交换参数）。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>ClientKeyExchange&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>客户端验证服务器的证书后，生成一个预主密钥，并使用服务器的公钥对其进行加密后发送给服务器。&lt;/li>
&lt;li>双方利用预主密钥以及交换的随机数计算出对称加密会话密钥。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Finished&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>双方分别发送 &lt;code>Finished&lt;/code> 消息。这些消息包含双方所有握手数据的摘要，用于验证握手过程的完整性。&lt;/li>
&lt;li>握手完成后，后续的通信将使用协商的对称密钥加密传输数据。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;h3 id="https-中对称加密与非对称加密的简单描述解决窃听风险">HTTPS 中对称加密与非对称加密的简单描述（解决窃听风险）
&lt;/h3>&lt;p>HTTPS 通过结合使用非对称加密和对称加密来确保通信的安全性。下面简单描述这两种加密方式在 HTTPS 中的作用：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>非对称加密&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>使用公钥和私钥进行加密和解密。&lt;/li>
&lt;li>在 TLS 握手阶段，客户端使用服务器的公钥加密预主密钥，服务器使用私钥来解密，从而安全地交换密钥。&lt;/li>
&lt;li>主要用于身份验证和密钥交换，虽然安全性高，但计算较慢。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>对称加密&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>使用相同的密钥进行加密和解密。&lt;/li>
&lt;li>TLS 握手完成后，客户端和服务器使用协商好的会话密钥对数据进行加密传输。&lt;/li>
&lt;li>速度快，适用于大量数据的加密，但依赖密钥的安全交换。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="https-中的摘要算法与数字签名的简单描述解决篡改风险">HTTPS 中的摘要算法与数字签名的简单描述（解决篡改风险）
&lt;/h3>&lt;ul>
&lt;li>
&lt;p>&lt;strong>摘要算法&lt;/strong>：&lt;br>
将任意长度的数据转换为固定长度的哈希值（或称消息摘要），其关键特点是单向性不可逆。&lt;/p>
&lt;ul>
&lt;li>&lt;strong>作用&lt;/strong>：用于检测数据在传输过程中是否被篡改。&lt;/li>
&lt;li>&lt;strong>常见算法&lt;/strong>：例如 SHA-256，适用于确保数据完整性。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>数字签名&lt;/strong>：&lt;br>
结合摘要算法与非对称加密技术，实现对数据来源和完整性的验证。&lt;/p>
&lt;p>公钥加密，私钥解密。这个目的是为了保证内容传输的安全，因为被公钥加密的内容，其他人是无法解
密的，只有持有私钥的人，才能解密出实际的内容;&lt;/p>
&lt;p>私钥加密，公钥解密。这个目的是为了保证消息不会被冒充，因为私钥是不可泄露的，如果公钥能正常
解密出私钥加密的内容，就能证明这个消息是来源于持有私钥身份的人发送的。&lt;/p>
&lt;ul>
&lt;li>&lt;strong>过程&lt;/strong>：先对数据使用摘要算法生成哈希值，然后使用发送方的私钥对该哈希值进行加密，从而得到数字签名；接收方使用发送方的公钥解密签名，并与自己计算的哈希值进行比对。&lt;/li>
&lt;li>&lt;strong>作用&lt;/strong>：验证数据的真实性及防止数据被篡改。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="https-数字证书的简单描述解决冒充风险">HTTPS 数字证书的简单描述（解决冒充风险）
&lt;/h3>&lt;p>HTTPS 数字证书是保障互联网通信安全的重要组成部分，用于验证服务器的身份并确保数据传输过程中的加密通信安全。&lt;/p>
&lt;p>数字证书是一种电子文档，其中包含以下信息：&lt;/p>
&lt;ul>
&lt;li>&lt;strong>持有者信息&lt;/strong>：如服务器的名称、域名及其他标识信息。&lt;/li>
&lt;li>&lt;strong>公钥&lt;/strong>：用于加密数据或验证数字签名的公钥。&lt;/li>
&lt;li>&lt;strong>颁发机构信息&lt;/strong>：数字证书由受信任的第三方（称为证书颁发机构，CA）签发，确保证书的真实性。&lt;/li>
&lt;li>&lt;strong>有效期&lt;/strong>：证书的开始日期和截止日期。&lt;/li>
&lt;li>&lt;strong>数字签名&lt;/strong>：由证书颁发机构使用其私钥生成的签名，用于验证证书内容是否被篡改。&lt;/li>
&lt;/ul>
&lt;p>通过数字证书的方式保证服务器公钥的身份，解决冒充的风险。&lt;/p>
&lt;h3 id="https-是否可能被中间人截获">HTTPS 是否可能被中间人截获？
&lt;/h3>&lt;p>HTTPS 设计的主要目标之一是防止中间人攻击（MITM）。通过使用 TLS/SSL 加密，HTTPS 确保了通信双方之间的数据在传输过程中是加密的，任何试图拦截的数据都难以解密或篡改。&lt;/p>
&lt;ol>
&lt;li>
&lt;p>&lt;strong>证书验证与信任链&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>浏览器和客户端会验证服务器提供的数字证书，确保其由受信任的证书颁发机构（CA）签发。如果验证通过，客户端就会信任与服务器的连接。&lt;/li>
&lt;li>如果攻击者能够伪造有效的证书或成功欺骗客户端（例如通过用户忽略警告），才有可能进行中间人攻击。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>加密保护&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>正确配置和使用 HTTPS 时，即使数据被中间人拦截，由于数据是加密的，攻击者也无法轻易解密和修改数据。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>潜在风险&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>配置错误：如果服务器使用了弱加密算法、过期或错误配置的证书，可能会降低安全性，使攻击者有机可乘。&lt;/li>
&lt;li>CA 安全问题：一旦证书颁发机构（CA）受到攻击或存在漏洞，攻击者也可能利用伪造证书进行攻击。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;h3 id="https-中-rsa-与-ecdhe-简单比较">HTTPS 中 RSA 与 ECDHE 简单比较
&lt;/h3>&lt;p>下表简单对比了 HTTPS 中使用的 RSA 与 ECDHE 两种密钥交换方式的主要区别：&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>方面&lt;/th>
&lt;th>RSA&lt;/th>
&lt;th>ECDHE&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>密钥交换方式&lt;/td>
&lt;td>用 RSA 公钥加密预主密钥&lt;/td>
&lt;td>基于椭圆曲线 Diffie-Hellman 临时密钥交换&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>前向保密性&lt;/td>
&lt;td>无前向保密性；私钥泄露可能导致历史会话泄密&lt;/td>
&lt;td>提供前向保密性；每次会话生成新的临时密钥&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>计算效率&lt;/td>
&lt;td>依赖较长密钥，加密解密计算量大&lt;/td>
&lt;td>密钥较短，计算更高效&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>安全性&lt;/td>
&lt;td>基于大数分解难题，量子计算威胁较高&lt;/td>
&lt;td>基于椭圆曲线离散对数问题，安全性更好&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3 id="http11-优化思路">HTTP/1.1 优化思路？
&lt;/h3>&lt;ol>
&lt;li>
&lt;p>通过缓存技术来避免发送 HTTP 请求。客户端收到第一个请求的响应后，可以将其缓存在本地磁盘，下次请求的时候，如果缓存没过期，就直接读取本地缓存的响应数据。如果缓存过期，客户端发送请求的时候带上响应数据的摘要，服务器比对后发现资源没有变化，就发出不带包体的 304 响应，告诉客户端缓存的响应仍然有效。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>第二个思路是，减少 HTTP 请求的次数，有以下的方法:&lt;/p>
&lt;ul>
&lt;li>将原本由客户端处理的重定向请求，交给代理服务器处理，这样可以减少重定向请求的次数。&lt;/li>
&lt;li>将多个小资源合并成一个大资源再传输，能够减少 HTTP 请求次数以及 头部的重复传输，再来减少 TCP 连接数量，进而省去 TCP 握手和慢启动的网络消耗。&lt;/li>
&lt;li>按需访问资源，只访问当前用户看得到/用得到的资源，当客户往下滑动，再访问接下来的资源，以此达到延迟请求，也就减少了同一时间的 HTTP 请求次数。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>通过压缩响应资源，降低传输资源的大小，从而提高传输效率，所以应当选择更优秀的压缩算法。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h3 id="为什么需要-websocket">为什么需要 WebSocket？
&lt;/h3>&lt;p>虽然 HTTP 协议已经在互联网应用中得到了广泛使用，但其设计理念是基于请求-响应模型，适合单向通信，即客户端发起请求，服务器返回响应。这种模型存在以下局限性：&lt;/p>
&lt;ul>
&lt;li>&lt;strong>无状态连接&lt;/strong>：HTTP 是无状态的，每次请求都要重新建立连接，无法直接保持长时间的双向通信。&lt;/li>
&lt;li>&lt;strong>单向通信&lt;/strong>：服务器不能主动向客户端推送数据，所有通信都必须由客户端发起请求。&lt;/li>
&lt;li>&lt;strong>高延迟&lt;/strong>：频繁建立和断开连接会带来额外的延迟和资源开销，尤其在实时应用场景下不够高效。&lt;/li>
&lt;/ul>
&lt;p>为了解决这些局限性，WebSocket 协议应运而生，其主要优势包括：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>&lt;strong>双向通信&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>WebSocket 建立了一个持久连接，允许数据在客户端和服务器之间双向实时传输，不需要每次都重新建立连接。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>低延迟&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>一旦建立连接，数据交换无需重复 HTTP 请求头，降低了通信延迟，适合要求实时更新的应用场景，如在线游戏、金融交易、聊天应用等。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>更高效的资源利用&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>持久连接减少了频繁的连接建立和关闭开销，有助于减轻服务器压力，同时也降低了网络带宽消耗。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>更灵活的应用场景&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>WebSocket 可以实现实时数据推送，服务器可以主动发送数据给客户端，非常适合实现实时监控、协同编辑等需要快速交互的应用。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol></description></item><item><title>关于TypeScript的笔记</title><link>https://blog.ltlyl.fun/p/%E5%85%B3%E4%BA%8Etypescript%E7%9A%84%E7%AC%94%E8%AE%B0/</link><pubDate>Tue, 18 Feb 2025 20:20:09 +0800</pubDate><guid>https://blog.ltlyl.fun/p/%E5%85%B3%E4%BA%8Etypescript%E7%9A%84%E7%AC%94%E8%AE%B0/</guid><description>&lt;h2 id="前言">前言
&lt;/h2>&lt;p>在前端开发中，TypeScript 是一门非常重要的语言，它为 JavaScript 引入了静态类型检查，提升了代码的可靠性和可维护性，对于构建健壮的应用程序至关重要。&lt;/p>
&lt;p>希望这些笔记不仅能帮助自己梳理知识体系，也能为其他使用 TypeScript 的开发者提供参考和启发。&lt;/p>
&lt;p>PS 不定时更新，欢迎讨论区留言。&lt;/p>
&lt;h2 id="类型系统">类型系统
&lt;/h2>&lt;h3 id="基本类型">基本类型
&lt;/h3>&lt;p>在 TypeScript 中，类型系统包括许多基本类型，用于描述数据的不同形态。下面列出了常见的基本类型及其示例代码：&lt;/p>
&lt;ol>
&lt;li>boolean（布尔类型）
用于表示逻辑值 &lt;code>true&lt;/code> 或 &lt;code>false&lt;/code>。&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-typescript" data-lang="typescript">&lt;span class="line">&lt;span class="ln">1&lt;/span>&lt;span class="cl">&lt;span class="kd">let&lt;/span> &lt;span class="nx">isActive&lt;/span>: &lt;span class="kt">boolean&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kc">true&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ol start="2">
&lt;li>string（字符串类型）
用于表示文本数据，可使用单引号、双引号或模板字符串。&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-typescript" data-lang="typescript">&lt;span class="line">&lt;span class="ln">1&lt;/span>&lt;span class="cl">&lt;span class="kd">let&lt;/span> &lt;span class="nx">greeting&lt;/span>: &lt;span class="kt">string&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s2">&amp;#34;Hello, TypeScript!&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ol start="3">
&lt;li>number（数字类型）
用于表示整数、浮点数、十六进制、二进制和八进制字面量。&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-typescript" data-lang="typescript">&lt;span class="line">&lt;span class="ln">1&lt;/span>&lt;span class="cl">&lt;span class="kd">let&lt;/span> &lt;span class="nx">age&lt;/span>: &lt;span class="kt">number&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">30&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">2&lt;/span>&lt;span class="cl">&lt;span class="kd">let&lt;/span> &lt;span class="nx">hex&lt;/span>: &lt;span class="kt">number&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mh">0xf00d&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">3&lt;/span>&lt;span class="cl">&lt;span class="kd">let&lt;/span> &lt;span class="nx">binary&lt;/span>: &lt;span class="kt">number&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="nx">b1010&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">4&lt;/span>&lt;span class="cl">&lt;span class="kd">let&lt;/span> &lt;span class="nx">octal&lt;/span>: &lt;span class="kt">number&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="nx">o744&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ol start="4">
&lt;li>bigint（大整数类型）
用于表示大于 &lt;code>2^53 - 1&lt;/code> 的整数。字面量后缀 &lt;code>n&lt;/code> 用于标识 bigint 类型。&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-typescript" data-lang="typescript">&lt;span class="line">&lt;span class="ln">1&lt;/span>&lt;span class="cl">&lt;span class="kd">let&lt;/span> &lt;span class="nx">bigNumber&lt;/span>: &lt;span class="kt">bigint&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">123456789012345678901234567890&lt;/span>&lt;span class="nx">n&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ol start="5">
&lt;li>symbol（符号类型）
用于创建独一无二的标识符，常用于对象属性的键。&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-typescript" data-lang="typescript">&lt;span class="line">&lt;span class="ln">1&lt;/span>&lt;span class="cl">&lt;span class="kd">let&lt;/span> &lt;span class="nx">uniqueKey&lt;/span>: &lt;span class="kt">symbol&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">Symbol&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;uniqueKey&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ol start="6">
&lt;li>object（对象类型）
表示除基本类型之外的所有类型。用于描述具有属性的复合数据结构。&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-typescript" data-lang="typescript">&lt;span class="line">&lt;span class="ln">1&lt;/span>&lt;span class="cl">&lt;span class="kd">let&lt;/span> &lt;span class="nx">person&lt;/span>: &lt;span class="kt">object&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="nx">name&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s2">&amp;#34;Alice&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">age&lt;/span>: &lt;span class="kt">25&lt;/span> &lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ol start="7">
&lt;li>undefined（未定义类型）
表示未赋值状态，只有一个唯一值 &lt;code>undefined&lt;/code>。&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-typescript" data-lang="typescript">&lt;span class="line">&lt;span class="ln">1&lt;/span>&lt;span class="cl">&lt;span class="kd">let&lt;/span> &lt;span class="nx">nothing&lt;/span>: &lt;span class="kt">undefined&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kc">undefined&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ol start="8">
&lt;li>null（空值类型）
表示空或不存在的值，只有一个唯一值 &lt;code>null&lt;/code>。&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-typescript" data-lang="typescript">&lt;span class="line">&lt;span class="ln">1&lt;/span>&lt;span class="cl">&lt;span class="kd">let&lt;/span> &lt;span class="nx">empty&lt;/span>: &lt;span class="kt">null&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kc">null&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="联合类型">联合类型
&lt;/h3>&lt;p>在 TypeScript 中，联合类型（Union Types）允许一个变量可以是多个类型中的一个。使用 &lt;code>|&lt;/code> 来分隔各个可能的类型，从而定义一个变量可能接受的所有类型。联合类型使得代码更具灵活性，同时保持静态类型检查的优势。&lt;/p>
&lt;p>例如，下面这个变量可以是数字或者字符串：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-typescript" data-lang="typescript">&lt;span class="line">&lt;span class="ln">1&lt;/span>&lt;span class="cl">&lt;span class="kd">let&lt;/span> &lt;span class="nx">value&lt;/span>: &lt;span class="kt">number&lt;/span> &lt;span class="o">|&lt;/span> &lt;span class="kt">string&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">2&lt;/span>&lt;span class="cl">&lt;span class="nx">value&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">42&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">3&lt;/span>&lt;span class="cl">&lt;span class="nx">value&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s2">&amp;#34;Hello, TypeScript!&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">4&lt;/span>&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">5&lt;/span>&lt;span class="cl">&lt;span class="c1">// 如果赋值为其他类型，例如 boolean，则会报错：
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">6&lt;/span>&lt;span class="cl">&lt;span class="c1">// value = true; // Error: Type &amp;#39;boolean&amp;#39; is not assignable to type &amp;#39;number | string&amp;#39;.
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="交叉类型">交叉类型
&lt;/h3>&lt;p>在 TypeScript 中，交叉类型（Intersection Types）允许你将多个类型合并为一个类型。当一个变量同时满足多个独立类型的要求时，就可以使用交叉类型。这种类型表示法使用 &lt;code>&amp;amp;&lt;/code> 来连接各个类型，从而创建出一个新的类型，该类型包含所有合并类型的属性和方法。&lt;/p>
&lt;p>假设我们有两个接口，分别描述了不同的属性：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-typescript" data-lang="typescript">&lt;span class="line">&lt;span class="ln">1&lt;/span>&lt;span class="cl">&lt;span class="kr">interface&lt;/span> &lt;span class="nx">Person&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">2&lt;/span>&lt;span class="cl"> &lt;span class="nx">name&lt;/span>: &lt;span class="kt">string&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">3&lt;/span>&lt;span class="cl"> &lt;span class="nx">age&lt;/span>: &lt;span class="kt">number&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">4&lt;/span>&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">5&lt;/span>&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">6&lt;/span>&lt;span class="cl">&lt;span class="kr">interface&lt;/span> &lt;span class="nx">Employee&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">7&lt;/span>&lt;span class="cl"> &lt;span class="nx">employeeId&lt;/span>: &lt;span class="kt">number&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">8&lt;/span>&lt;span class="cl"> &lt;span class="nx">department&lt;/span>: &lt;span class="kt">string&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">9&lt;/span>&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>我们可以使用交叉类型将这两个接口合并，创建一个既是 &lt;code>Person&lt;/code> 又是 &lt;code>Employee&lt;/code> 的类型：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-typescript" data-lang="typescript">&lt;span class="line">&lt;span class="ln">1&lt;/span>&lt;span class="cl">&lt;span class="kr">type&lt;/span> &lt;span class="nx">Manager&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">Person&lt;/span> &lt;span class="o">&amp;amp;&lt;/span> &lt;span class="nx">Employee&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">2&lt;/span>&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">3&lt;/span>&lt;span class="cl">&lt;span class="kr">const&lt;/span> &lt;span class="nx">manager&lt;/span>: &lt;span class="kt">Manager&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">4&lt;/span>&lt;span class="cl"> &lt;span class="nx">name&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s2">&amp;#34;Alice&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">5&lt;/span>&lt;span class="cl"> &lt;span class="nx">age&lt;/span>: &lt;span class="kt">30&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">6&lt;/span>&lt;span class="cl"> &lt;span class="nx">employeeId&lt;/span>: &lt;span class="kt">12345&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">7&lt;/span>&lt;span class="cl"> &lt;span class="nx">department&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s2">&amp;#34;Sales&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">8&lt;/span>&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>在这个例子中，&lt;code>Manager&lt;/code> 类型必须同时具有 &lt;code>Person&lt;/code> 和 &lt;code>Employee&lt;/code> 的所有属性。&lt;/p>
&lt;h3 id="type">type
&lt;/h3>&lt;p>&lt;code>type&lt;/code>命令用来定义一个类型的别名。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="ln">1&lt;/span>&lt;span class="cl">type Age = number;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">2&lt;/span>&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">3&lt;/span>&lt;span class="cl">let age:Age = 55;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>上面示例中，&lt;code>type&lt;/code>命令为 number 类型定义了一个别名 Age。这样就能像使用 number 一样，使用 Age 作为类型。&lt;/p>
&lt;p>别名可以让类型的名字变得更有意义，也能增加代码的可读性，还可以使复杂类型用起来更方便，便于以后修改变量的类型。&lt;/p>
&lt;p>别名不允许重名。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="ln">1&lt;/span>&lt;span class="cl">type Color = &amp;#39;red&amp;#39;;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">2&lt;/span>&lt;span class="cl">type Color = &amp;#39;blue&amp;#39;; // 报错
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>上面示例中，同一个别名 Color 声明了两次，就报错了。&lt;/p>
&lt;p>别名的作用域是块级作用域。这意味着，代码块内部定义的别名，影响不到外部。&lt;/p>
&lt;h3 id="typescript-typeof-操作符">TypeScript &lt;code>typeof&lt;/code> 操作符
&lt;/h3>&lt;p>在 TypeScript 中，&lt;code>typeof&lt;/code> 操作符有两种主要用途：&lt;/p>
&lt;ul>
&lt;li>获取一个表达式在运行时的类型（类似于 JavaScript 中的 &lt;code>typeof&lt;/code>）。&lt;/li>
&lt;li>在类型层面上查询变量或表达式的类型，以便在其他地方重用该类型（类型查询）。&lt;/li>
&lt;/ul>
&lt;ol>
&lt;li>运行时使用 &lt;code>typeof&lt;/code>&lt;/li>
&lt;/ol>
&lt;p>在运行时，&lt;code>typeof&lt;/code> 操作符返回一个字符串，描述了一个值的类型。这与 JavaScript 完全一致。常见的返回值包括 &lt;code>&amp;quot;string&amp;quot;&lt;/code>, &lt;code>&amp;quot;number&amp;quot;&lt;/code>, &lt;code>&amp;quot;boolean&amp;quot;&lt;/code>, &lt;code>&amp;quot;undefined&amp;quot;&lt;/code>, &lt;code>&amp;quot;object&amp;quot;&lt;/code>, 和 &lt;code>&amp;quot;function&amp;quot;&lt;/code>。&lt;/p>
&lt;p>例如：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-typescript" data-lang="typescript">&lt;span class="line">&lt;span class="ln">1&lt;/span>&lt;span class="cl">&lt;span class="kr">const&lt;/span> &lt;span class="nx">someValue&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">42&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">2&lt;/span>&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">3&lt;/span>&lt;span class="cl">&lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="k">typeof&lt;/span> &lt;span class="nx">someValue&lt;/span> &lt;span class="o">===&lt;/span> &lt;span class="s2">&amp;#34;number&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">4&lt;/span>&lt;span class="cl"> &lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;someValue 是一个数字&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">5&lt;/span>&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ol start="2">
&lt;li>类型层面上的 &lt;code>typeof&lt;/code>（类型查询）&lt;/li>
&lt;/ol>
&lt;p>TypeScript 允许你在类型层面上使用 &lt;code>typeof&lt;/code> 来获取一个变量或对象的类型，并将其用于类型声明中。这种用法称为“类型查询”，它可以帮助你重用已有的类型，而无需重复编写接口或类型定义。&lt;/p>
&lt;p>例如：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-typescript" data-lang="typescript">&lt;span class="line">&lt;span class="ln"> 1&lt;/span>&lt;span class="cl">&lt;span class="kr">const&lt;/span> &lt;span class="nx">person&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 2&lt;/span>&lt;span class="cl"> &lt;span class="nx">name&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s2">&amp;#34;Alice&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 3&lt;/span>&lt;span class="cl"> &lt;span class="nx">age&lt;/span>: &lt;span class="kt">30&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 4&lt;/span>&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 5&lt;/span>&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 6&lt;/span>&lt;span class="cl">&lt;span class="c1">// 使用 typeof person 获取 person 的类型，并创建一个类型别名
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 7&lt;/span>&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="kr">type&lt;/span> &lt;span class="nx">PersonType&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">typeof&lt;/span> &lt;span class="nx">person&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 8&lt;/span>&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 9&lt;/span>&lt;span class="cl">&lt;span class="kr">const&lt;/span> &lt;span class="nx">anotherPerson&lt;/span>: &lt;span class="kt">PersonType&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">10&lt;/span>&lt;span class="cl"> &lt;span class="nx">name&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s2">&amp;#34;Bob&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">11&lt;/span>&lt;span class="cl"> &lt;span class="nx">age&lt;/span>: &lt;span class="kt">25&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">12&lt;/span>&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>在这个例子中，&lt;code>typeof person&lt;/code> 获取了 &lt;code>person&lt;/code> 变量的类型，并创建了名为 &lt;code>PersonType&lt;/code> 的类型，这样可以避免手动定义重复的类型结构。&lt;/p>
&lt;h3 id="块级类型声明">块级类型声明
&lt;/h3>&lt;p>TypeScript 支持块级类型声明，即类型可以声明在代码块（用大括号表示）里面，并且只在当前代码块有效。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="ln">1&lt;/span>&lt;span class="cl">if (true) {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">2&lt;/span>&lt;span class="cl"> type T = number;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">3&lt;/span>&lt;span class="cl"> let v:T = 5;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">4&lt;/span>&lt;span class="cl">} else {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">5&lt;/span>&lt;span class="cl"> type T = string;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">6&lt;/span>&lt;span class="cl"> let v:T = &amp;#39;hello&amp;#39;;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">7&lt;/span>&lt;span class="cl">}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>上面示例中，存在两个代码块，其中分别有一个类型 T 的声明。这两个声明都只在自己的代码块内部有效，在代码块外部无效。&lt;/p>
&lt;h2 id="数组">数组
&lt;/h2>&lt;h3 id="使用方括号语法">使用方括号语法
&lt;/h3>&lt;p>最常见的方式是直接在类型后面加上方括号 &lt;code>[]&lt;/code> 表示数组类型。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-typescript" data-lang="typescript">&lt;span class="line">&lt;span class="ln">1&lt;/span>&lt;span class="cl">&lt;span class="kd">let&lt;/span> &lt;span class="nx">numbers&lt;/span>: &lt;span class="kt">number&lt;/span>&lt;span class="p">[]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">3&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">4&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">5&lt;/span>&lt;span class="p">];&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">2&lt;/span>&lt;span class="cl">&lt;span class="kd">let&lt;/span> &lt;span class="nx">fruits&lt;/span>: &lt;span class="kt">string&lt;/span>&lt;span class="p">[]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="s2">&amp;#34;apple&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;banana&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;cherry&amp;#34;&lt;/span>&lt;span class="p">];&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="使用泛型语法">使用泛型语法
&lt;/h3>&lt;p>TypeScript 提供了泛型数组语法 &lt;code>Array&amp;lt;元素类型&amp;gt;&lt;/code>，其效果与方括号语法完全相同。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-typescript" data-lang="typescript">&lt;span class="line">&lt;span class="ln">1&lt;/span>&lt;span class="cl">&lt;span class="kd">let&lt;/span> &lt;span class="nx">numbers&lt;/span>: &lt;span class="kt">Array&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">number&lt;/span>&lt;span class="p">&amp;gt;&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">3&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">4&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">5&lt;/span>&lt;span class="p">];&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">2&lt;/span>&lt;span class="cl">&lt;span class="kd">let&lt;/span> &lt;span class="nx">fruits&lt;/span>: &lt;span class="kt">Array&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">string&lt;/span>&lt;span class="p">&amp;gt;&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="s2">&amp;#34;apple&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;banana&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;cherry&amp;#34;&lt;/span>&lt;span class="p">];&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="多维数组">多维数组
&lt;/h3>&lt;p>多维数组是数组的数组。例如，二维数组可以表示为数组中的每个元素都是一个数组。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-typescript" data-lang="typescript">&lt;span class="line">&lt;span class="ln"> 1&lt;/span>&lt;span class="cl">&lt;span class="kd">let&lt;/span> &lt;span class="nx">matrix&lt;/span>: &lt;span class="kt">number&lt;/span>&lt;span class="p">[][]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">[&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 2&lt;/span>&lt;span class="cl"> &lt;span class="p">[&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">],&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 3&lt;/span>&lt;span class="cl"> &lt;span class="p">[&lt;/span>&lt;span class="mi">3&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">4&lt;/span>&lt;span class="p">],&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 4&lt;/span>&lt;span class="cl"> &lt;span class="p">[&lt;/span>&lt;span class="mi">5&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">6&lt;/span>&lt;span class="p">],&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 5&lt;/span>&lt;span class="cl">&lt;span class="p">];&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 6&lt;/span>&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 7&lt;/span>&lt;span class="cl">&lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">matrix&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 8&lt;/span>&lt;span class="cl">&lt;span class="c1">// 输出:
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 9&lt;/span>&lt;span class="cl">&lt;span class="c1">// [
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">10&lt;/span>&lt;span class="cl">&lt;span class="c1">// [1, 2],
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">11&lt;/span>&lt;span class="cl">&lt;span class="c1">// [3, 4],
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">12&lt;/span>&lt;span class="cl">&lt;span class="c1">// [5, 6]
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">13&lt;/span>&lt;span class="cl">&lt;span class="c1">// ]
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="元组">元组
&lt;/h3>&lt;p>在 TypeScript 中，元组（Tuple）是一种特殊类型的数组，它允许你在同一个数组中存储多个不同类型的值，同时要求元素的个数和顺序固定。使用元组，能够更明确地描述混合类型数据的结构。&lt;/p>
&lt;ul>
&lt;li>定义元组&lt;/li>
&lt;/ul>
&lt;p>你可以使用带有固定数量和类型的元素来定义元组。例如，下面我们定义了一个包含数字和字符串的元组：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-typescript" data-lang="typescript">&lt;span class="line">&lt;span class="ln">1&lt;/span>&lt;span class="cl">&lt;span class="kd">let&lt;/span> &lt;span class="nx">user&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="kt">number&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">string&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;Alice&amp;#34;&lt;/span>&lt;span class="p">];&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">2&lt;/span>&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">3&lt;/span>&lt;span class="cl">&lt;span class="c1">// 正确: 按照定义提供了 number 和 string 类型的值
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">4&lt;/span>&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">user&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">5&lt;/span>&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">6&lt;/span>&lt;span class="cl">&lt;span class="c1">// 错误示例: 交换顺序会导致类型错误
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">7&lt;/span>&lt;span class="cl">&lt;span class="c1">// let wrongUser: [number, string] = [&amp;#34;Alice&amp;#34;, 1];
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>元组的解构赋值&lt;/li>
&lt;/ul>
&lt;p>元组支持解构赋值，你可以直接把元组的每个元素赋值给单独的变量：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-typescript" data-lang="typescript">&lt;span class="line">&lt;span class="ln">1&lt;/span>&lt;span class="cl">&lt;span class="kd">let&lt;/span> &lt;span class="nx">user&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="kt">number&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">string&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;Alice&amp;#34;&lt;/span>&lt;span class="p">];&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">2&lt;/span>&lt;span class="cl">&lt;span class="kd">let&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="nx">userId&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">userName&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">user&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">3&lt;/span>&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">4&lt;/span>&lt;span class="cl">&lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">userId&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="c1">// 输出: 1
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">5&lt;/span>&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">userName&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="c1">// 输出: Alice
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>可选的元组元素&lt;/li>
&lt;/ul>
&lt;p>TypeScript 允许在元组中定义可选元素，这些可选元素必须放在元组的末尾。例如：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-typescript" data-lang="typescript">&lt;span class="line">&lt;span class="ln">1&lt;/span>&lt;span class="cl">&lt;span class="kd">let&lt;/span> &lt;span class="nx">response&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="kt">number&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">string&lt;/span>&lt;span class="o">?&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="mi">200&lt;/span>&lt;span class="p">];&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">2&lt;/span>&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">3&lt;/span>&lt;span class="cl">&lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">response&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="c1">// 输出: [200]
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">4&lt;/span>&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">5&lt;/span>&lt;span class="cl">&lt;span class="c1">// 此外，也可以提供所有元素
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">6&lt;/span>&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="kd">let&lt;/span> &lt;span class="nx">fullResponse&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="kt">number&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">string&lt;/span>&lt;span class="o">?&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="mi">200&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;OK&amp;#34;&lt;/span>&lt;span class="p">];&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">7&lt;/span>&lt;span class="cl">&lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">fullResponse&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="c1">// 输出: [200, &amp;#34;OK&amp;#34;]
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="函数类型">函数类型
&lt;/h2>&lt;h3 id="函数声明">函数声明
&lt;/h3>&lt;p>通过函数声明，你可以直接在函数签名中定义参数和返回值的类型。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-typescript" data-lang="typescript">&lt;span class="line">&lt;span class="ln">1&lt;/span>&lt;span class="cl">&lt;span class="kd">function&lt;/span> &lt;span class="nx">greet&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">name&lt;/span>: &lt;span class="kt">string&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="kt">string&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">2&lt;/span>&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="sb">`Hello, &lt;/span>&lt;span class="si">${&lt;/span>&lt;span class="nx">name&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="sb">!`&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">3&lt;/span>&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">4&lt;/span>&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">5&lt;/span>&lt;span class="cl">&lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">greet&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;Alice&amp;#34;&lt;/span>&lt;span class="p">));&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="函数表达式">函数表达式
&lt;/h3>&lt;p>你也可以使用函数表达式的方式定义函数，同时为变量指定函数类型。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-typescript" data-lang="typescript">&lt;span class="line">&lt;span class="ln">1&lt;/span>&lt;span class="cl">&lt;span class="kr">const&lt;/span> &lt;span class="nx">add&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">a&lt;/span>: &lt;span class="kt">number&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">b&lt;/span>: &lt;span class="kt">number&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">=&amp;gt;&lt;/span> &lt;span class="kt">number&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kd">function&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">a&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">b&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">2&lt;/span>&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="nx">a&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="nx">b&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">3&lt;/span>&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">4&lt;/span>&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">5&lt;/span>&lt;span class="cl">&lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">add&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">3&lt;/span>&lt;span class="p">));&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="可选参数和默认参数">可选参数和默认参数
&lt;/h3>&lt;p>TypeScript 允许在函数中使用可选参数和默认参数，使得函数调用更灵活。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-typescript" data-lang="typescript">&lt;span class="line">&lt;span class="ln"> 1&lt;/span>&lt;span class="cl">&lt;span class="c1">// 可选参数 lastName 使用 ? 标记
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 2&lt;/span>&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="kd">function&lt;/span> &lt;span class="nx">buildName&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">firstName&lt;/span>: &lt;span class="kt">string&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">lastName?&lt;/span>: &lt;span class="kt">string&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="kt">string&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 3&lt;/span>&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="nx">lastName&lt;/span> &lt;span class="o">?&lt;/span> &lt;span class="sb">`&lt;/span>&lt;span class="si">${&lt;/span>&lt;span class="nx">firstName&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="sb"> &lt;/span>&lt;span class="si">${&lt;/span>&lt;span class="nx">lastName&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="sb">`&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="nx">firstName&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 4&lt;/span>&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 5&lt;/span>&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 6&lt;/span>&lt;span class="cl">&lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">buildName&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;John&amp;#34;&lt;/span>&lt;span class="p">));&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 7&lt;/span>&lt;span class="cl">&lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">buildName&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;John&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;Doe&amp;#34;&lt;/span>&lt;span class="p">));&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 8&lt;/span>&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 9&lt;/span>&lt;span class="cl">&lt;span class="c1">// 默认参数 b 默认值为 2
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">10&lt;/span>&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="kd">function&lt;/span> &lt;span class="nx">multiply&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">a&lt;/span>: &lt;span class="kt">number&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">b&lt;/span>: &lt;span class="kt">number&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="kt">number&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">11&lt;/span>&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="nx">a&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="nx">b&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">12&lt;/span>&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">13&lt;/span>&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">14&lt;/span>&lt;span class="cl">&lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">multiply&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">5&lt;/span>&lt;span class="p">));&lt;/span> &lt;span class="c1">// 输出: 10
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">15&lt;/span>&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">multiply&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">5&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">3&lt;/span>&lt;span class="p">));&lt;/span> &lt;span class="c1">// 输出: 15
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="剩余参数">剩余参数
&lt;/h3>&lt;p>当函数需要接受任意数量的参数时，可以使用剩余参数（rest parameters）。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-typescript" data-lang="typescript">&lt;span class="line">&lt;span class="ln">1&lt;/span>&lt;span class="cl">&lt;span class="kd">function&lt;/span> &lt;span class="nx">joinStrings&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">separator&lt;/span>: &lt;span class="kt">string&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">...&lt;/span>&lt;span class="nx">strings&lt;/span>: &lt;span class="kt">string&lt;/span>&lt;span class="p">[])&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="kt">string&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">2&lt;/span>&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="nx">strings&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">join&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">separator&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">3&lt;/span>&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">4&lt;/span>&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">5&lt;/span>&lt;span class="cl">&lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">joinStrings&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;, &amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;apple&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;banana&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;cherry&amp;#34;&lt;/span>&lt;span class="p">));&lt;/span> &lt;span class="c1">// 输出: apple, banana, cherry
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="函数类型作为参数和返回值">函数类型作为参数和返回值
&lt;/h3>&lt;p>TypeScript 可以定义函数类型，将其用作参数类型或返回值类型，从而实现高阶函数。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-typescript" data-lang="typescript">&lt;span class="line">&lt;span class="ln"> 1&lt;/span>&lt;span class="cl">&lt;span class="c1">// 定义一个函数类型 Operation
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 2&lt;/span>&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="kr">type&lt;/span> &lt;span class="nx">Operation&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">a&lt;/span>: &lt;span class="kt">number&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">b&lt;/span>: &lt;span class="kt">number&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">=&amp;gt;&lt;/span> &lt;span class="kt">number&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 3&lt;/span>&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 4&lt;/span>&lt;span class="cl">&lt;span class="c1">// 实现加法函数
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 5&lt;/span>&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="kr">const&lt;/span> &lt;span class="nx">add&lt;/span>: &lt;span class="kt">Operation&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">a&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">b&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">=&amp;gt;&lt;/span> &lt;span class="nx">a&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="nx">b&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 6&lt;/span>&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 7&lt;/span>&lt;span class="cl">&lt;span class="c1">// 高阶函数，接收一个 Operation 类型的函数作为参数
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 8&lt;/span>&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="kd">function&lt;/span> &lt;span class="nx">calculate&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">a&lt;/span>: &lt;span class="kt">number&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">b&lt;/span>: &lt;span class="kt">number&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">op&lt;/span>: &lt;span class="kt">Operation&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="kt">number&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 9&lt;/span>&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="nx">op&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">a&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">b&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">10&lt;/span>&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">11&lt;/span>&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">12&lt;/span>&lt;span class="cl">&lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">calculate&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">4&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">5&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">add&lt;/span>&lt;span class="p">));&lt;/span> &lt;span class="c1">// 输出: 9
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="函数重载">函数重载
&lt;/h3>&lt;p>函数重载允许同一个函数根据不同的参数类型或数量提供多种签名，从而实现多态。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-typescript" data-lang="typescript">&lt;span class="line">&lt;span class="ln"> 1&lt;/span>&lt;span class="cl">&lt;span class="c1">// 函数重载的声明
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 2&lt;/span>&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="kd">function&lt;/span> &lt;span class="nx">combine&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">x&lt;/span>: &lt;span class="kt">string&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">y&lt;/span>: &lt;span class="kt">string&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="kt">string&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 3&lt;/span>&lt;span class="cl">&lt;span class="kd">function&lt;/span> &lt;span class="nx">combine&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">x&lt;/span>: &lt;span class="kt">number&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">y&lt;/span>: &lt;span class="kt">number&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="kt">number&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 4&lt;/span>&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 5&lt;/span>&lt;span class="cl">&lt;span class="c1">// 实现函数重载的函数体
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 6&lt;/span>&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="kd">function&lt;/span> &lt;span class="nx">combine&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">x&lt;/span>: &lt;span class="kt">any&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">y&lt;/span>: &lt;span class="kt">any&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="kt">any&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 7&lt;/span>&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="nx">x&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="nx">y&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 8&lt;/span>&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 9&lt;/span>&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">10&lt;/span>&lt;span class="cl">&lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">combine&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;Hello, &amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;World!&amp;#34;&lt;/span>&lt;span class="p">));&lt;/span> &lt;span class="c1">// 输出: Hello, World!
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">11&lt;/span>&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">combine&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">10&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">20&lt;/span>&lt;span class="p">));&lt;/span> &lt;span class="c1">// 输出: 30
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="对象">对象
&lt;/h2>&lt;h3 id="使用接口定义对象类型">使用接口定义对象类型
&lt;/h3>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-typescript" data-lang="typescript">&lt;span class="line">&lt;span class="ln"> 1&lt;/span>&lt;span class="cl">&lt;span class="kr">interface&lt;/span> &lt;span class="nx">User&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 2&lt;/span>&lt;span class="cl"> &lt;span class="nx">id&lt;/span>: &lt;span class="kt">number&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 3&lt;/span>&lt;span class="cl"> &lt;span class="nx">name&lt;/span>: &lt;span class="kt">string&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 4&lt;/span>&lt;span class="cl"> &lt;span class="nx">email&lt;/span>: &lt;span class="kt">string&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 5&lt;/span>&lt;span class="cl"> &lt;span class="c1">// 可选属性, 如果没有提供不会报错
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 6&lt;/span>&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nx">age?&lt;/span>: &lt;span class="kt">number&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 7&lt;/span>&lt;span class="cl"> &lt;span class="c1">// 只读属性, 一旦赋值后就不能修改
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 8&lt;/span>&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="kr">readonly&lt;/span> &lt;span class="nx">createdAt&lt;/span>: &lt;span class="kt">Date&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 9&lt;/span>&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">10&lt;/span>&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">11&lt;/span>&lt;span class="cl">&lt;span class="kr">const&lt;/span> &lt;span class="nx">user&lt;/span>: &lt;span class="kt">User&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">12&lt;/span>&lt;span class="cl"> &lt;span class="nx">id&lt;/span>: &lt;span class="kt">1&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">13&lt;/span>&lt;span class="cl"> &lt;span class="nx">name&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s2">&amp;#34;Alice&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">14&lt;/span>&lt;span class="cl"> &lt;span class="nx">email&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s2">&amp;#34;alice@example.com&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">15&lt;/span>&lt;span class="cl"> &lt;span class="nx">createdAt&lt;/span>: &lt;span class="kt">new&lt;/span> &lt;span class="nb">Date&lt;/span>&lt;span class="p">(),&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">16&lt;/span>&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">17&lt;/span>&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">18&lt;/span>&lt;span class="cl">&lt;span class="c1">// 下面的修改将发生错误，因为 createdAt 是只读属性
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">19&lt;/span>&lt;span class="cl">&lt;span class="c1">// user.createdAt = new Date();
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">20&lt;/span>&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">user&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="使用类型别名定义对象类型">使用类型别名定义对象类型
&lt;/h3>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-typescript" data-lang="typescript">&lt;span class="line">&lt;span class="ln"> 1&lt;/span>&lt;span class="cl">&lt;span class="kr">type&lt;/span> &lt;span class="nx">User&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 2&lt;/span>&lt;span class="cl"> &lt;span class="nx">id&lt;/span>: &lt;span class="kt">number&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 3&lt;/span>&lt;span class="cl"> &lt;span class="nx">name&lt;/span>: &lt;span class="kt">string&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 4&lt;/span>&lt;span class="cl"> &lt;span class="nx">email&lt;/span>: &lt;span class="kt">string&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 5&lt;/span>&lt;span class="cl"> &lt;span class="nx">age?&lt;/span>: &lt;span class="kt">number&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// 可选属性
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 6&lt;/span>&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="kr">readonly&lt;/span> &lt;span class="nx">createdAt&lt;/span>: &lt;span class="kt">Date&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// 只读属性
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 7&lt;/span>&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 8&lt;/span>&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 9&lt;/span>&lt;span class="cl">&lt;span class="kr">const&lt;/span> &lt;span class="nx">user&lt;/span>: &lt;span class="kt">User&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">10&lt;/span>&lt;span class="cl"> &lt;span class="nx">id&lt;/span>: &lt;span class="kt">2&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">11&lt;/span>&lt;span class="cl"> &lt;span class="nx">name&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s2">&amp;#34;Bob&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">12&lt;/span>&lt;span class="cl"> &lt;span class="nx">email&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s2">&amp;#34;bob@example.com&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">13&lt;/span>&lt;span class="cl"> &lt;span class="nx">createdAt&lt;/span>: &lt;span class="kt">new&lt;/span> &lt;span class="nb">Date&lt;/span>&lt;span class="p">(),&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">14&lt;/span>&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">15&lt;/span>&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">16&lt;/span>&lt;span class="cl">&lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">user&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="定义对象上的方法">定义对象上的方法
&lt;/h3>&lt;p>除了描述属性，TypeScript 的对象类型同样可以描述方法。下面是一个例子：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-typescript" data-lang="typescript">&lt;span class="line">&lt;span class="ln"> 1&lt;/span>&lt;span class="cl">&lt;span class="kr">interface&lt;/span> &lt;span class="nx">User&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 2&lt;/span>&lt;span class="cl"> &lt;span class="nx">id&lt;/span>: &lt;span class="kt">number&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 3&lt;/span>&lt;span class="cl"> &lt;span class="nx">name&lt;/span>: &lt;span class="kt">string&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 4&lt;/span>&lt;span class="cl"> &lt;span class="nx">email&lt;/span>: &lt;span class="kt">string&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 5&lt;/span>&lt;span class="cl"> &lt;span class="nx">greet&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="kt">string&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 6&lt;/span>&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 7&lt;/span>&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 8&lt;/span>&lt;span class="cl">&lt;span class="kr">const&lt;/span> &lt;span class="nx">user&lt;/span>: &lt;span class="kt">User&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 9&lt;/span>&lt;span class="cl"> &lt;span class="nx">id&lt;/span>: &lt;span class="kt">3&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">10&lt;/span>&lt;span class="cl"> &lt;span class="nx">name&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s2">&amp;#34;Charlie&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">11&lt;/span>&lt;span class="cl"> &lt;span class="nx">email&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s2">&amp;#34;charlie@example.com&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">12&lt;/span>&lt;span class="cl"> &lt;span class="nx">greet() {&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">13&lt;/span>&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="sb">`Hello, my name is &lt;/span>&lt;span class="si">${&lt;/span>&lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">name&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="sb">`&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">14&lt;/span>&lt;span class="cl"> &lt;span class="p">},&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">15&lt;/span>&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">16&lt;/span>&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">17&lt;/span>&lt;span class="cl">&lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">user&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">greet&lt;/span>&lt;span class="p">());&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="对象字面量的类型检查">对象字面量的类型检查
&lt;/h3>&lt;p>在 TypeScript 中，当你直接使用对象字面量创建对象时，编译器会对属性的存在性和类型进行严格检查。这帮助我们发现拼写错误或遗漏的属性：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-typescript" data-lang="typescript">&lt;span class="line">&lt;span class="ln"> 1&lt;/span>&lt;span class="cl">&lt;span class="kr">interface&lt;/span> &lt;span class="nx">Config&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 2&lt;/span>&lt;span class="cl"> &lt;span class="nx">port&lt;/span>: &lt;span class="kt">number&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 3&lt;/span>&lt;span class="cl"> &lt;span class="nx">host&lt;/span>: &lt;span class="kt">string&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 4&lt;/span>&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 5&lt;/span>&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 6&lt;/span>&lt;span class="cl">&lt;span class="kr">const&lt;/span> &lt;span class="nx">config&lt;/span>: &lt;span class="kt">Config&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 7&lt;/span>&lt;span class="cl"> &lt;span class="nx">port&lt;/span>: &lt;span class="kt">8080&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 8&lt;/span>&lt;span class="cl"> &lt;span class="nx">host&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s2">&amp;#34;localhost&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 9&lt;/span>&lt;span class="cl"> &lt;span class="c1">// 如果加上多余属性，例如 protocol: &amp;#34;http&amp;#34;，编译器将报错
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">10&lt;/span>&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">11&lt;/span>&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">12&lt;/span>&lt;span class="cl">&lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="sb">`Server running at http://&lt;/span>&lt;span class="si">${&lt;/span>&lt;span class="nx">config&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">host&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="sb">:&lt;/span>&lt;span class="si">${&lt;/span>&lt;span class="nx">config&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">port&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="sb">`&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="使用索引签名定义动态属性的对象">使用索引签名定义动态属性的对象
&lt;/h3>&lt;p>当你需要定义一个包含动态属性名的对象时，可以使用索引签名。如下例子展示了如何定义一个可以包含任意字符串键及其对应值的对象：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-typescript" data-lang="typescript">&lt;span class="line">&lt;span class="ln"> 1&lt;/span>&lt;span class="cl">&lt;span class="kr">interface&lt;/span> &lt;span class="nx">Dictionary&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 2&lt;/span>&lt;span class="cl"> &lt;span class="p">[&lt;/span>&lt;span class="nx">key&lt;/span>: &lt;span class="kt">string&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="kt">string&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 3&lt;/span>&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 4&lt;/span>&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 5&lt;/span>&lt;span class="cl">&lt;span class="kr">const&lt;/span> &lt;span class="nx">translations&lt;/span>: &lt;span class="kt">Dictionary&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 6&lt;/span>&lt;span class="cl"> &lt;span class="nx">hello&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s2">&amp;#34;你好&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 7&lt;/span>&lt;span class="cl"> &lt;span class="nx">goodbye&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s2">&amp;#34;再见&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 8&lt;/span>&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 9&lt;/span>&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">10&lt;/span>&lt;span class="cl">&lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">translations&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">hello&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="interface">interface
&lt;/h2>&lt;h3 id="定义基本接口">定义基本接口
&lt;/h3>&lt;p>下面的示例展示了如何定义一个接口 &lt;code>User&lt;/code>，描述用户对象的属性：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-typescript" data-lang="typescript">&lt;span class="line">&lt;span class="ln"> 1&lt;/span>&lt;span class="cl">&lt;span class="kr">interface&lt;/span> &lt;span class="nx">User&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 2&lt;/span>&lt;span class="cl"> &lt;span class="nx">id&lt;/span>: &lt;span class="kt">number&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 3&lt;/span>&lt;span class="cl"> &lt;span class="nx">name&lt;/span>: &lt;span class="kt">string&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 4&lt;/span>&lt;span class="cl"> &lt;span class="nx">age&lt;/span>: &lt;span class="kt">number&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 5&lt;/span>&lt;span class="cl"> &lt;span class="nx">email?&lt;/span>: &lt;span class="kt">string&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// 可选属性，用 ? 标记
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 6&lt;/span>&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 7&lt;/span>&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 8&lt;/span>&lt;span class="cl">&lt;span class="kr">const&lt;/span> &lt;span class="nx">user&lt;/span>: &lt;span class="kt">User&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 9&lt;/span>&lt;span class="cl"> &lt;span class="nx">id&lt;/span>: &lt;span class="kt">1&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">10&lt;/span>&lt;span class="cl"> &lt;span class="nx">name&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s2">&amp;#34;Alice&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">11&lt;/span>&lt;span class="cl"> &lt;span class="nx">age&lt;/span>: &lt;span class="kt">30&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">12&lt;/span>&lt;span class="cl"> &lt;span class="nx">email&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s2">&amp;#34;alice@example.com&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">13&lt;/span>&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">14&lt;/span>&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">15&lt;/span>&lt;span class="cl">&lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">user&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="接口中的只读属性">接口中的只读属性
&lt;/h3>&lt;p>接口可以定义只读属性，一旦对象被创建后，这些属性就不能被修改，从而增强数据的安全性。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-typescript" data-lang="typescript">&lt;span class="line">&lt;span class="ln"> 1&lt;/span>&lt;span class="cl">&lt;span class="kr">interface&lt;/span> &lt;span class="nx">ReadOnlyUser&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 2&lt;/span>&lt;span class="cl"> &lt;span class="kr">readonly&lt;/span> &lt;span class="nx">id&lt;/span>: &lt;span class="kt">number&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 3&lt;/span>&lt;span class="cl"> &lt;span class="nx">name&lt;/span>: &lt;span class="kt">string&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 4&lt;/span>&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 5&lt;/span>&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 6&lt;/span>&lt;span class="cl">&lt;span class="kr">const&lt;/span> &lt;span class="nx">user&lt;/span>: &lt;span class="kt">ReadOnlyUser&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 7&lt;/span>&lt;span class="cl"> &lt;span class="nx">id&lt;/span>: &lt;span class="kt">100&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 8&lt;/span>&lt;span class="cl"> &lt;span class="nx">name&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s2">&amp;#34;Bob&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 9&lt;/span>&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">10&lt;/span>&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">11&lt;/span>&lt;span class="cl">&lt;span class="c1">// 下面这行代码会报错，因为 id 是只读属性
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">12&lt;/span>&lt;span class="cl">&lt;span class="c1">// user.id = 101;
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="接口中的方法">接口中的方法
&lt;/h3>&lt;p>可以在接口中定义方法，这样实现接口的对象必须提供方法的具体实现。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-typescript" data-lang="typescript">&lt;span class="line">&lt;span class="ln"> 1&lt;/span>&lt;span class="cl">&lt;span class="kr">interface&lt;/span> &lt;span class="nx">User&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 2&lt;/span>&lt;span class="cl"> &lt;span class="nx">id&lt;/span>: &lt;span class="kt">number&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 3&lt;/span>&lt;span class="cl"> &lt;span class="nx">name&lt;/span>: &lt;span class="kt">string&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 4&lt;/span>&lt;span class="cl"> &lt;span class="nx">greet&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">message&lt;/span>: &lt;span class="kt">string&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="kt">string&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 5&lt;/span>&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 6&lt;/span>&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 7&lt;/span>&lt;span class="cl">&lt;span class="kr">const&lt;/span> &lt;span class="nx">user&lt;/span>: &lt;span class="kt">User&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 8&lt;/span>&lt;span class="cl"> &lt;span class="nx">id&lt;/span>: &lt;span class="kt">2&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 9&lt;/span>&lt;span class="cl"> &lt;span class="nx">name&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s2">&amp;#34;Charlie&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">10&lt;/span>&lt;span class="cl"> &lt;span class="nx">greet&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">message&lt;/span>: &lt;span class="kt">string&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">11&lt;/span>&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="sb">`Hello &lt;/span>&lt;span class="si">${&lt;/span>&lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">name&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="sb">, &lt;/span>&lt;span class="si">${&lt;/span>&lt;span class="nx">message&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="sb">`&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">12&lt;/span>&lt;span class="cl"> &lt;span class="p">},&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">13&lt;/span>&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">14&lt;/span>&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">15&lt;/span>&lt;span class="cl">&lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">user&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">greet&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;welcome!&amp;#34;&lt;/span>&lt;span class="p">));&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="接口的嵌套和继承">接口的嵌套和继承
&lt;/h3>&lt;p>接口不仅可以描述简单对象，还可以通过嵌套和继承来构建更复杂的类型结构。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-typescript" data-lang="typescript">&lt;span class="line">&lt;span class="ln"> 1&lt;/span>&lt;span class="cl">&lt;span class="kr">interface&lt;/span> &lt;span class="nx">Person&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 2&lt;/span>&lt;span class="cl"> &lt;span class="nx">name&lt;/span>: &lt;span class="kt">string&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 3&lt;/span>&lt;span class="cl"> &lt;span class="nx">age&lt;/span>: &lt;span class="kt">number&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 4&lt;/span>&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 5&lt;/span>&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 6&lt;/span>&lt;span class="cl">&lt;span class="kr">interface&lt;/span> &lt;span class="nx">Employee&lt;/span> &lt;span class="kr">extends&lt;/span> &lt;span class="nx">Person&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 7&lt;/span>&lt;span class="cl"> &lt;span class="nx">employeeId&lt;/span>: &lt;span class="kt">number&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 8&lt;/span>&lt;span class="cl"> &lt;span class="nx">department&lt;/span>: &lt;span class="kt">string&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 9&lt;/span>&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">10&lt;/span>&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">11&lt;/span>&lt;span class="cl">&lt;span class="kr">const&lt;/span> &lt;span class="nx">employee&lt;/span>: &lt;span class="kt">Employee&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">12&lt;/span>&lt;span class="cl"> &lt;span class="nx">name&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s2">&amp;#34;David&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">13&lt;/span>&lt;span class="cl"> &lt;span class="nx">age&lt;/span>: &lt;span class="kt">28&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">14&lt;/span>&lt;span class="cl"> &lt;span class="nx">employeeId&lt;/span>: &lt;span class="kt">12345&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">15&lt;/span>&lt;span class="cl"> &lt;span class="nx">department&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s2">&amp;#34;Engineering&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">16&lt;/span>&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">17&lt;/span>&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">18&lt;/span>&lt;span class="cl">&lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">employee&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="使用接口描述函数类型">使用接口描述函数类型
&lt;/h3>&lt;p>接口同样可以用来描述函数类型，这样可以明确函数的参数和返回值类型，提高代码的可读性和稳定性。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-typescript" data-lang="typescript">&lt;span class="line">&lt;span class="ln"> 1&lt;/span>&lt;span class="cl">&lt;span class="kr">interface&lt;/span> &lt;span class="nx">Comparator&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 2&lt;/span>&lt;span class="cl"> &lt;span class="p">(&lt;/span>&lt;span class="nx">a&lt;/span>: &lt;span class="kt">number&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">b&lt;/span>: &lt;span class="kt">number&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="kt">number&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 3&lt;/span>&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 4&lt;/span>&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 5&lt;/span>&lt;span class="cl">&lt;span class="kr">const&lt;/span> &lt;span class="nx">compare&lt;/span>: &lt;span class="kt">Comparator&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">x&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">y&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">=&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 6&lt;/span>&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">x&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="nx">y&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 7&lt;/span>&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">x&lt;/span> &lt;span class="o">&amp;gt;&lt;/span> &lt;span class="nx">y&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 8&lt;/span>&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 9&lt;/span>&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">10&lt;/span>&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">11&lt;/span>&lt;span class="cl">&lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">compare&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">3&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">5&lt;/span>&lt;span class="p">));&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>关于CSS的笔记</title><link>https://blog.ltlyl.fun/p/%E5%85%B3%E4%BA%8Ecss%E7%9A%84%E7%AC%94%E8%AE%B0/</link><pubDate>Sat, 15 Feb 2025 16:35:09 +0800</pubDate><guid>https://blog.ltlyl.fun/p/%E5%85%B3%E4%BA%8Ecss%E7%9A%84%E7%AC%94%E8%AE%B0/</guid><description>&lt;h2 id="前言">前言
&lt;/h2>&lt;p>在前端开发中，CSS（层叠样式表）是一门非常重要的语言，它控制着网页的视觉呈现效果。作为前端三大基础技术（HTML、CSS、JavaScript）之一，掌握 CSS 对于构建优美的用户界面至关重要。&lt;/p>
&lt;p>希望这些笔记不仅能帮助自己梳理知识体系，也能为其他学习 CSS 的朋友提供参考。&lt;/p>
&lt;p>PS 不定时更新，欢迎讨论区留言。&lt;/p>
&lt;h2 id="css-选择器及其优先级">CSS 选择器及其优先级
&lt;/h2>&lt;ol>
&lt;li>优先级权重表&lt;/li>
&lt;/ol>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>选择器类型&lt;/th>
&lt;th>权重值&lt;/th>
&lt;th>示例&lt;/th>
&lt;th>说明&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>!important&lt;/td>
&lt;td>∞&lt;/td>
&lt;td>&lt;code>color: red !important;&lt;/code>&lt;/td>
&lt;td>最高优先级&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>行内样式&lt;/td>
&lt;td>1,0,0,0&lt;/td>
&lt;td>&lt;code>&amp;lt;div style=&amp;quot;...&amp;quot;&amp;gt;&lt;/code>&lt;/td>
&lt;td>直接在标签上的样式&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>ID 选择器&lt;/td>
&lt;td>0,1,0,0&lt;/td>
&lt;td>&lt;code>#header&lt;/code>&lt;/td>
&lt;td>以#开头的选择器&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>类/伪类/属性&lt;/td>
&lt;td>0,0,1,0&lt;/td>
&lt;td>&lt;code>.class&lt;/code> &lt;code>:hover&lt;/code> &lt;code>[type=&amp;quot;text&amp;quot;]&lt;/code>&lt;/td>
&lt;td>类、伪类、属性选择器&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>元素/伪元素&lt;/td>
&lt;td>0,0,0,1&lt;/td>
&lt;td>&lt;code>div&lt;/code> &lt;code>::before&lt;/code>&lt;/td>
&lt;td>标签选择器和伪元素&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>通配符&lt;/td>
&lt;td>0,0,0,0&lt;/td>
&lt;td>&lt;code>*&lt;/code>&lt;/td>
&lt;td>最低优先级&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;ol start="2">
&lt;li>常用选择器示例表&lt;/li>
&lt;/ol>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>选择器类型&lt;/th>
&lt;th>语法&lt;/th>
&lt;th>示例&lt;/th>
&lt;th>说明&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>通配符&lt;/td>
&lt;td>&lt;code>*&lt;/code>&lt;/td>
&lt;td>&lt;code>* { margin: 0; }&lt;/code>&lt;/td>
&lt;td>选择所有元素&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>元素选择器&lt;/td>
&lt;td>&lt;code>element&lt;/code>&lt;/td>
&lt;td>&lt;code>p { color: blue; }&lt;/code>&lt;/td>
&lt;td>选择指定标签&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>类选择器&lt;/td>
&lt;td>&lt;code>.class&lt;/code>&lt;/td>
&lt;td>&lt;code>.active { color: red; }&lt;/code>&lt;/td>
&lt;td>选择指定类名&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>ID 选择器&lt;/td>
&lt;td>&lt;code>#id&lt;/code>&lt;/td>
&lt;td>&lt;code>#header { height: 60px; }&lt;/code>&lt;/td>
&lt;td>选择指定 ID&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>属性选择器&lt;/td>
&lt;td>&lt;code>[attribute]&lt;/code>&lt;/td>
&lt;td>&lt;code>[type=&amp;quot;text&amp;quot;] { border: 1px solid; }&lt;/code>&lt;/td>
&lt;td>选择带有特定属性的元素&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;ol start="3">
&lt;li>组合选择器表&lt;/li>
&lt;/ol>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>组合方式&lt;/th>
&lt;th>语法&lt;/th>
&lt;th>示例&lt;/th>
&lt;th>优先级计算&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>后代选择器&lt;/td>
&lt;td>&lt;code>A B&lt;/code>&lt;/td>
&lt;td>&lt;code>.nav a { color: blue; }&lt;/code>&lt;/td>
&lt;td>累加(0,0,1,1)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>子选择器&lt;/td>
&lt;td>&lt;code>A &amp;gt; B&lt;/code>&lt;/td>
&lt;td>&lt;code>.nav &amp;gt; a { color: red; }&lt;/code>&lt;/td>
&lt;td>累加(0,0,1,1)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>相邻兄弟&lt;/td>
&lt;td>&lt;code>A + B&lt;/code>&lt;/td>
&lt;td>&lt;code>h2 + p { margin: 10px; }&lt;/code>&lt;/td>
&lt;td>累加(0,0,0,2)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>通用兄弟&lt;/td>
&lt;td>&lt;code>A ~ B&lt;/code>&lt;/td>
&lt;td>&lt;code>h2 ~ p { color: gray; }&lt;/code>&lt;/td>
&lt;td>累加(0,0,0,2)&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;ol start="4">
&lt;li>伪类和伪元素表&lt;/li>
&lt;/ol>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>类型&lt;/th>
&lt;th>示例&lt;/th>
&lt;th>优先级&lt;/th>
&lt;th>说明&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>伪类&lt;/td>
&lt;td>&lt;code>:hover&lt;/code>&lt;/td>
&lt;td>0,0,1,0&lt;/td>
&lt;td>特定状态的样式&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>伪类&lt;/td>
&lt;td>&lt;code>:first-child&lt;/code>&lt;/td>
&lt;td>0,0,1,0&lt;/td>
&lt;td>位置相关的样式&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>伪元素&lt;/td>
&lt;td>&lt;code>::before&lt;/code>&lt;/td>
&lt;td>0,0,0,1&lt;/td>
&lt;td>创建额外的元素&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>伪元素&lt;/td>
&lt;td>&lt;code>::first-line&lt;/code>&lt;/td>
&lt;td>0,0,0,1&lt;/td>
&lt;td>特殊的文本样式&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;ol start="5">
&lt;li>复杂选择器优先级计算表&lt;/li>
&lt;/ol>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>选择器&lt;/th>
&lt;th>计算方式&lt;/th>
&lt;th>最终优先级&lt;/th>
&lt;th>说明&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;code>.header.active&lt;/code>&lt;/td>
&lt;td>(0,0,1,0) + (0,0,1,0)&lt;/td>
&lt;td>0,0,2,0&lt;/td>
&lt;td>多类选择器&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>#nav .list li&lt;/code>&lt;/td>
&lt;td>(0,1,0,0) + (0,0,1,0) + (0,0,0,1)&lt;/td>
&lt;td>0,1,1,1&lt;/td>
&lt;td>ID+类+元素&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>.nav a:hover&lt;/code>&lt;/td>
&lt;td>(0,0,1,0) + (0,0,0,1) + (0,0,1,0)&lt;/td>
&lt;td>0,0,2,1&lt;/td>
&lt;td>类+元素+伪类&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h2 id="flex">flex
&lt;/h2>&lt;p>&lt;img src="https://blog.ltlyl.fun/p/%E5%85%B3%E4%BA%8Ecss%E7%9A%84%E7%AC%94%E8%AE%B0/flex_terms.png"
width="563"
height="333"
srcset="https://blog.ltlyl.fun/p/%E5%85%B3%E4%BA%8Ecss%E7%9A%84%E7%AC%94%E8%AE%B0/flex_terms_hu_209ac836a528fcfe.png 480w, https://blog.ltlyl.fun/p/%E5%85%B3%E4%BA%8Ecss%E7%9A%84%E7%AC%94%E8%AE%B0/flex_terms_hu_3d3a60326e700233.png 1024w"
loading="lazy"
alt="flex布局"
class="gallery-image"
data-flex-grow="169"
data-flex-basis="405px"
>&lt;/p>
&lt;p>CSS Flexbox（弹性盒布局）是一种用于在容器内分布空间以及对齐内容的布局模式。它提供了一种更高效的方式来排列、对齐和分布容器内的项目，即使在复杂的应用或大型屏幕设备上也能很好地工作。&lt;/p>
&lt;ul>
&lt;li>&lt;strong>容器（Flex Container）&lt;/strong>：使用 &lt;code>display: flex;&lt;/code> 或 &lt;code>display: inline-flex;&lt;/code> 声明的元素，其所有直接子元素都将成为 flex 项目。&lt;/li>
&lt;li>&lt;strong>项目（Flex Items）&lt;/strong>：在 flex 容器内的直接子元素。&lt;/li>
&lt;/ul>
&lt;h3 id="容器属性">容器属性
&lt;/h3>&lt;ul>
&lt;li>
&lt;p>&lt;strong>display&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>&lt;code>display: flex;&lt;/code>：将元素设为块级 flex 容器。&lt;/li>
&lt;li>&lt;code>display: inline-flex;&lt;/code>：将元素设为内联级 flex 容器。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>flex-direction&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>定义主轴的方向，决定项目的排列方向：
&lt;ul>
&lt;li>&lt;code>row&lt;/code>（默认）：水平方向，从左到右。&lt;/li>
&lt;li>&lt;code>row-reverse&lt;/code>：水平方向，从右到左。&lt;/li>
&lt;li>&lt;code>column&lt;/code>：垂直方向，从上到下。&lt;/li>
&lt;li>&lt;code>column-reverse&lt;/code>：垂直方向，从下到上。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>flex-wrap&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>定义当项目总尺寸超出容器时是否换行：
&lt;ul>
&lt;li>&lt;code>nowrap&lt;/code>（默认）：不换行。&lt;/li>
&lt;li>&lt;code>wrap&lt;/code>：换行，第一行在上方。&lt;/li>
&lt;li>&lt;code>wrap-reverse&lt;/code>：换行，第一行在下方。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>justify-content&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>定义在主轴上的对齐方式：
&lt;ul>
&lt;li>&lt;code>flex-start&lt;/code>（默认）：左对齐或起点对齐。&lt;/li>
&lt;li>&lt;code>flex-end&lt;/code>：右对齐或结束对齐。&lt;/li>
&lt;li>&lt;code>center&lt;/code>：居中对齐。&lt;/li>
&lt;li>&lt;code>space-between&lt;/code>：两端对齐，项目之间的间隔相等。&lt;/li>
&lt;li>&lt;code>space-around&lt;/code>：项目两侧的间隔相等。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>align-items&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>定义在交叉轴（与主轴垂直方向）的对齐方式：
&lt;ul>
&lt;li>&lt;code>stretch&lt;/code>（默认）：拉伸填充容器。&lt;/li>
&lt;li>&lt;code>flex-start&lt;/code>：交叉轴起点对齐。&lt;/li>
&lt;li>&lt;code>flex-end&lt;/code>：交叉轴结束对齐。&lt;/li>
&lt;li>&lt;code>center&lt;/code>：居中对齐。&lt;/li>
&lt;li>&lt;code>baseline&lt;/code>：以项目的第一行文字基线对齐。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>align-content&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>定义多行对齐方式（当项目换行时）：
&lt;ul>
&lt;li>&lt;code>stretch&lt;/code>（默认）：各行拉伸到占满容器。&lt;/li>
&lt;li>&lt;code>flex-start&lt;/code>：各行顶端对齐。&lt;/li>
&lt;li>&lt;code>flex-end&lt;/code>：各行底端对齐。&lt;/li>
&lt;li>&lt;code>center&lt;/code>：居中对齐。&lt;/li>
&lt;li>&lt;code>space-between&lt;/code>：行与行之间间隔相等。&lt;/li>
&lt;li>&lt;code>space-around&lt;/code>：行之间的间隔相等。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="项目属性">项目属性
&lt;/h3>&lt;ul>
&lt;li>
&lt;p>&lt;strong>flex-grow&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>定义项目的放大比例。如果空间充裕，flex 项目可以根据它的增长因子扩展。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>flex-shrink&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>定义项目的缩小比例。当空间不足时，flex 项目可以根据它的缩小因子收缩。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>flex-basis&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>定义在分配多余空间之前，项目占据的主轴空间。可以设置为固定值（例如 &lt;code>200px&lt;/code>）也可以设置为 &lt;code>auto&lt;/code>。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>flex&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>flex 属性是 flex-grow、flex-shrink 和 flex-basis 的简写形式。常用写法如：&lt;code>flex: 1;&lt;/code> 表示 &lt;code>flex-grow: 1; flex-shrink: 1; flex-basis: 0%;&lt;/code>。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>align-self&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>允许单个项目有不同于其他项目的对齐方式，可以覆盖容器的 &lt;code>align-items&lt;/code> 属性。&lt;/li>
&lt;li>取值：&lt;code>auto&lt;/code>（默认）、&lt;code>flex-start&lt;/code>、&lt;code>flex-end&lt;/code>、&lt;code>center&lt;/code>、&lt;code>baseline&lt;/code>、&lt;code>stretch&lt;/code>。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="grid">Grid
&lt;/h2>&lt;p>&lt;img src="https://blog.ltlyl.fun/p/%E5%85%B3%E4%BA%8Ecss%E7%9A%84%E7%AC%94%E8%AE%B0/grid.png"
width="1196"
height="553"
srcset="https://blog.ltlyl.fun/p/%E5%85%B3%E4%BA%8Ecss%E7%9A%84%E7%AC%94%E8%AE%B0/grid_hu_61e12abcca52dff5.png 480w, https://blog.ltlyl.fun/p/%E5%85%B3%E4%BA%8Ecss%E7%9A%84%E7%AC%94%E8%AE%B0/grid_hu_ae218fa91aa51644.png 1024w"
loading="lazy"
alt="grid布局"
class="gallery-image"
data-flex-grow="216"
data-flex-basis="519px"
>&lt;/p>
&lt;p>CSS Grid 布局是一种基于网格的二维布局系统，用于创建复杂和响应式的网页布局。与 Flexbox 不同，CSS Grid 能够同时处理行和列，使其成为构建整体页面布局的强大工具。&lt;/p>
&lt;ul>
&lt;li>&lt;strong>容器（Grid Container）：&lt;/strong> 使用 &lt;code>display: grid;&lt;/code> 或 &lt;code>display: inline-grid;&lt;/code> 声明的元素。其所有直接子元素将自动成为网格项目，并根据指定的网格定义进行排列。&lt;/li>
&lt;li>&lt;strong>项目（Grid Items）：&lt;/strong> Grid 容器内的直接子元素，每个项目在网格中按照指定的位置排布。&lt;/li>
&lt;li>&lt;strong>网格线（Grid Lines）：&lt;/strong> 网格中的水平和垂直分隔线，用来分割行和列。&lt;/li>
&lt;li>&lt;strong>网格单元（Grid Cell）：&lt;/strong> 两条相邻的网格线之间形成的区域，类似于表格中的单元格。&lt;/li>
&lt;li>&lt;strong>网格区域（Grid Area）：&lt;/strong> 由一个或多个网格单元组成的区域，可为网格项目命名以便布局控制。&lt;/li>
&lt;/ul>
&lt;h3 id="容器属性-1">容器属性
&lt;/h3>&lt;ul>
&lt;li>
&lt;p>&lt;strong>display:&lt;/strong> 声明一个元素为 Grid 容器。&lt;/p>
&lt;ul>
&lt;li>&lt;code>display: grid;&lt;/code> 用于块级 Grid 容器。&lt;/li>
&lt;li>&lt;code>display: inline-grid;&lt;/code> 用于内联级 Grid 容器。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>grid-template-columns:&lt;/strong> 定义网格的列。可以使用固定长度、百分比、fr 单位或者 &lt;code>repeat()&lt;/code> 函数来指定列的布局。&lt;/p>
&lt;ul>
&lt;li>示例：
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-css" data-lang="css">&lt;span class="line">&lt;span class="ln">1&lt;/span>&lt;span class="cl">&lt;span class="nt">grid-template-columns&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nt">200px&lt;/span> &lt;span class="nt">1fr&lt;/span> &lt;span class="nt">2fr&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>或者：
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-css" data-lang="css">&lt;span class="line">&lt;span class="ln">1&lt;/span>&lt;span class="cl">&lt;span class="nt">grid-template-columns&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nt">repeat&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="nt">3&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="nt">1fr&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>grid-template-rows:&lt;/strong> 定义网格的行，写法和 &lt;code>grid-template-columns&lt;/code> 类似。&lt;/p>
&lt;ul>
&lt;li>示例：
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-css" data-lang="css">&lt;span class="line">&lt;span class="ln">1&lt;/span>&lt;span class="cl">&lt;span class="nt">grid-template-rows&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nt">100px&lt;/span> &lt;span class="nt">auto&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>gap (或 grid-gap):&lt;/strong> 定义网格行和列之间的间隙。&lt;/p>
&lt;ul>
&lt;li>示例：
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-css" data-lang="css">&lt;span class="line">&lt;span class="ln">1&lt;/span>&lt;span class="cl">&lt;span class="nt">gap&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nt">10px&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>grid-template-areas:&lt;/strong> 定义命名网格区域，使布局更加具语义化。&lt;/p>
&lt;ul>
&lt;li>示例：
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-css" data-lang="css">&lt;span class="line">&lt;span class="ln">1&lt;/span>&lt;span class="cl">&lt;span class="nt">grid-template-areas&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">2&lt;/span>&lt;span class="cl"> &lt;span class="s2">&amp;#34;header header&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">3&lt;/span>&lt;span class="cl"> &lt;span class="s2">&amp;#34;sidebar content&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">4&lt;/span>&lt;span class="cl"> &lt;span class="s2">&amp;#34;footer footer&amp;#34;&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>justify-items &amp;amp; align-items:&lt;/strong> 分别设置网格项目在各自网格单元内的水平和垂直对齐方式。&lt;/p>
&lt;ul>
&lt;li>示例：
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-css" data-lang="css">&lt;span class="line">&lt;span class="ln">1&lt;/span>&lt;span class="cl">&lt;span class="nt">justify-items&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nt">center&lt;/span>&lt;span class="o">;&lt;/span> &lt;span class="c">/* 水平居中 */&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">2&lt;/span>&lt;span class="cl">&lt;span class="nt">align-items&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nt">center&lt;/span>&lt;span class="o">;&lt;/span> &lt;span class="c">/* 垂直居中 */&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>justify-content &amp;amp; align-content:&lt;/strong> 设置整个网格在容器内的对齐方式，适用于有多余空间的情况。&lt;/p>
&lt;ul>
&lt;li>示例：
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-css" data-lang="css">&lt;span class="line">&lt;span class="ln">1&lt;/span>&lt;span class="cl">&lt;span class="nt">justify-content&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nt">space-around&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">2&lt;/span>&lt;span class="cl">&lt;span class="nt">align-content&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nt">center&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="项目属性-1">项目属性
&lt;/h3>&lt;ul>
&lt;li>
&lt;p>&lt;strong>grid-column &amp;amp; grid-row:&lt;/strong> 定义项目在网格中所占据的列和行范围。可以使用网格线编号或命名区域。&lt;/p>
&lt;ul>
&lt;li>示例：
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-css" data-lang="css">&lt;span class="line">&lt;span class="ln">1&lt;/span>&lt;span class="cl">&lt;span class="nt">grid-column&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nt">1&lt;/span> &lt;span class="o">/&lt;/span> &lt;span class="nt">3&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">2&lt;/span>&lt;span class="cl">&lt;span class="nt">grid-row&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nt">2&lt;/span> &lt;span class="o">/&lt;/span> &lt;span class="nt">4&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>grid-area:&lt;/strong> 用于将项目放置在命名的网格区域内，通常与 &lt;code>grid-template-areas&lt;/code> 配合使用。&lt;/p>
&lt;ul>
&lt;li>示例：
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-css" data-lang="css">&lt;span class="line">&lt;span class="ln">1&lt;/span>&lt;span class="cl">&lt;span class="nt">grid-area&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nt">header&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul></description></item><item><title>第一次写 blog</title><link>https://blog.ltlyl.fun/p/%E7%AC%AC%E4%B8%80%E6%AC%A1%E5%86%99-blog/</link><pubDate>Sat, 08 Feb 2025 19:54:09 +0800</pubDate><guid>https://blog.ltlyl.fun/p/%E7%AC%AC%E4%B8%80%E6%AC%A1%E5%86%99-blog/</guid><description>&lt;h2 id="为什么要搭建个人博客">为什么要搭建个人博客
&lt;/h2>&lt;p>很早就有搭建个人博客的想法，主要是想有一个属于自己的空间，可以记录学习笔记、分享经验和想法。经过一段时间的准备，终于开始实践这个计划了。&lt;/p>
&lt;p>希望通过写博客的方式，能够督促自己持续学习和思考。也欢迎大家多多交流指教！&lt;/p>
&lt;p>测试&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-gdscript3" data-lang="gdscript3">&lt;span class="line">&lt;span class="ln"> 1&lt;/span>&lt;span class="cl"> &lt;span class="n">highlights&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">forEach&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">highlight&lt;/span> &lt;span class="o">=&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 2&lt;/span>&lt;span class="cl"> &lt;span class="k">const&lt;/span> &lt;span class="n">copyButton&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">document&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">createElement&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;button&amp;#39;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 3&lt;/span>&lt;span class="cl"> &lt;span class="n">copyButton&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">innerHTML&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">copyText&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 4&lt;/span>&lt;span class="cl"> &lt;span class="n">copyButton&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">classList&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">add&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;copyCodeButton&amp;#39;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 5&lt;/span>&lt;span class="cl"> &lt;span class="n">highlight&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">appendChild&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">copyButton&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 6&lt;/span>&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 7&lt;/span>&lt;span class="cl"> &lt;span class="k">const&lt;/span> &lt;span class="n">codeBlock&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">highlight&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">querySelector&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;code[data-lang]&amp;#39;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 8&lt;/span>&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="o">!&lt;/span>&lt;span class="n">codeBlock&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="k">return&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 9&lt;/span>&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">10&lt;/span>&lt;span class="cl"> &lt;span class="n">copyButton&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">addEventListener&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;click&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">()&lt;/span> &lt;span class="o">=&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">11&lt;/span>&lt;span class="cl"> &lt;span class="o">//&lt;/span> &lt;span class="err">创建一个临时容器来克隆代码块的内容&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">12&lt;/span>&lt;span class="cl"> &lt;span class="k">const&lt;/span> &lt;span class="n">tempCodeBlock&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">codeBlock&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">cloneNode&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">true&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="n">as&lt;/span> &lt;span class="n">HTMLElement&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">13&lt;/span>&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">14&lt;/span>&lt;span class="cl"> &lt;span class="o">//&lt;/span> &lt;span class="err">删除行号，行号的元素是&lt;/span> &lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">span&lt;/span> &lt;span class="k">class&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;ln&amp;#34;&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">15&lt;/span>&lt;span class="cl"> &lt;span class="k">const&lt;/span> &lt;span class="n">lineNumbers&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">tempCodeBlock&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">querySelectorAll&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;.ln&amp;#39;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">16&lt;/span>&lt;span class="cl"> &lt;span class="n">lineNumbers&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">forEach&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">lineNumber&lt;/span> &lt;span class="o">=&amp;gt;&lt;/span> &lt;span class="n">lineNumber&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">remove&lt;/span>&lt;span class="p">());&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">17&lt;/span>&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">18&lt;/span>&lt;span class="cl"> &lt;span class="o">//&lt;/span> &lt;span class="err">获取没有行号的纯文本内容&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">19&lt;/span>&lt;span class="cl"> &lt;span class="k">const&lt;/span> &lt;span class="n">codeText&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">tempCodeBlock&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">textContent&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">20&lt;/span>&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">21&lt;/span>&lt;span class="cl"> &lt;span class="n">navigator&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">clipboard&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">writeText&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">codeText&lt;/span> &lt;span class="o">||&lt;/span> &lt;span class="s1">&amp;#39;&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">22&lt;/span>&lt;span class="cl"> &lt;span class="o">//&lt;/span> &lt;span class="n">navigator&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">clipboard&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">writeText&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">codeBlock&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">textContent&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">23&lt;/span>&lt;span class="cl"> &lt;span class="o">.&lt;/span>&lt;span class="n">then&lt;/span>&lt;span class="p">(()&lt;/span> &lt;span class="o">=&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">24&lt;/span>&lt;span class="cl"> &lt;span class="n">copyButton&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">textContent&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">copiedText&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">25&lt;/span>&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">26&lt;/span>&lt;span class="cl"> &lt;span class="n">setTimeout&lt;/span>&lt;span class="p">(()&lt;/span> &lt;span class="o">=&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">27&lt;/span>&lt;span class="cl"> &lt;span class="n">copyButton&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">textContent&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">copyText&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">28&lt;/span>&lt;span class="cl"> &lt;span class="p">},&lt;/span> &lt;span class="mi">1000&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">29&lt;/span>&lt;span class="cl"> &lt;span class="p">})&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">30&lt;/span>&lt;span class="cl"> &lt;span class="o">.&lt;/span>&lt;span class="n">catch&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">err&lt;/span> &lt;span class="o">=&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">31&lt;/span>&lt;span class="cl"> &lt;span class="n">alert&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">err&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">32&lt;/span>&lt;span class="cl"> &lt;span class="n">console&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;Something went wrong&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">err&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">33&lt;/span>&lt;span class="cl"> &lt;span class="p">});&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">34&lt;/span>&lt;span class="cl"> &lt;span class="p">});&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">35&lt;/span>&lt;span class="cl"> &lt;span class="p">});&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item></channel></rss>